:PROPERTIES:
:ID:       9e2b0560-a823-4718-9f6d-638557e3f482
:END:
#+title: mtv-lang
* TODO Dispatch.Lazy
** Learn what `dispatchLoop` needs, what `arc` etc. do.
   via experiment
* TODO coordinate bass, drums
* TODO learn to use it
** use nMergec to change the amp values of a Museq Sample
   remembering that the default amp value is 0.1
* TODO top priorities
** TODO make simultaneous triggers writeable without specifying voice
*** A simple hack
    would be to give different names to every event.
*** TODO A CPU-cheaper option is not much harder to write.
    Since triggers are momentary, the overlap analysis needed is simple:
    If they start at the same time, they need different labels, otherwise not.
** TODO How are overlapping notes in a monophonic voice rendered?
   See comments in this code.
*** exploratory code
 (low,high) = (333,444)
p1 name = mm 1 $ pre3 name [ (0, 1.5, m1 "freq" low) ]
p2 name = mm 1 $ pre3 name [ (0, 1.5, m1 "freq" high) ]

-- cat [p1,p2] should equal this
cat_p1_p2 = mm 2 $ pre3 "double" [ (0, 1, m1 "freq" low)
                                 , (1, 2, m1 "freq" high)
                                 ]

metronome = mm 2 $ pre3 "m" [ (0, 1, m1 "freq" 555)
                            , (1, 2, m1 "on" 0) ]

chAll $ mfl [ ( -- Just to know what a unit of time is.
                "2", nBoop $ insertOns metronome
              ) ]

chAll $ mfl [ ( -- As expected, plays two continuous notes.
                "1",
                nBoop $ insertOns $ cat [p1 "a", p2 "b"]
              ) ]

chAll $ mfl [
  -- Surprisingly, these are in phase: Voice 2 octave-doubles voice 1.
  ( "1", nBoop $ insertOns $
         cat [p1 "a", p2 "a"]
  )
  ,
  ( "2", nBoop $ insertOns $
         ops [("freq",(*2))] $ insertOns $ cat_p1_p2
  )
  ]

chAll $ mfl [
  ( -- As expected, plays only one voice.
    -- But in this:
    --   Pr.pPrint $ insertOns $ cat [p1 "a", p2 "a"]
    -- each note appears to last 5/2 units of time.
    -- So how does Dispatch know to cut one off when the other starts?
    -- And should that instead be the responsibility of `cat`,
    -- not `dispatchLoop`?
    "1",
    nBoop $ insertOns $ cat [p1 "a", p2 "a"]
  ) ]

x = nBoop $ insertOns $ cat [p1 "a", p2 "a"]
Pr.pPrint $ arc 0 1 0 2 x

Pr.pPrint $ arc 0 1 0 1 x
Pr.pPrint $ arc 0 1 0 1 $ nBoop $ insertOns cat_p1_p2
Pr.pPrint $ museqFrame 0 1 0 $ museq_NotesToScSends x
*** `arc` keeps everything it possibly reasonably could.
    running this:
      x = nBoop $ insertOns $ cat [p1 "a", p2 "a"]
      y = arc 0 1 0 2 x
      Pr.pPrint y
    we see that x includes 3 "a" events in [0,2].
    The first is a holdover from the previous cycle.
    The last is cut off at time 2.
    The middle one overlaps both of the others,
    despite the fact all of them have the same label.
*** The order of events seems to matter.
    In these:
      Pr.pPrint $ arc 0 1 0 1 x
      Pr.pPrint $ arc 0 1 1 2 x
    the notes present are the same, but their order is different.
    Either the first or the last is the one that actually sounds.
** TODO grep for pitfall | todo
** TODO brainstorm types
   Just write some types, see if they're fun.
** TODO study
*** TODO Trace dispatchLoop and friends.
    Because I don't really know what's happening.
*** TODO Need data. Try making sequences.
    I won't know which of these problems matters, or which matters more,
    until I've frustrated over sequences for a while.
** TODO change data structures
*** Background states for voices.
**** motivation: can't adjust a parameter that's not in a Museq
**** motivation: restore a Zot to reasonable parameter values
***** Idea: a map from voices to all params that have been modified in it.
***** Idea: a way to change the synth without using a Museq.
**** motivation: re-sendinng values that don't change is inefficient
*** Events longer than the host Museq's sup0 make no sense.
    Events correspond to named monophonic voices,
    so an event from this cycle cannot audibly overlap with itself from the next cycle.
*** The ends of events aren't always meaningful.
**** for Notes, certainly not
    For instance, in Dispatch.Dispatch.dispatchLoop,
    they appear not to be used:
	evs0 :: [(Time, Action)]
          = concatMap f $ M.elems mqs' where
          f :: Museq String Action
            -> [(Time, Action)] -- start times and actions
          f m = map (\ev -> ((ev^.evStart), (ev^.evData))) evs
            where evs = arc time0 tempoPeriod startRender
			(startRender + frameDuration) m
**** but for other things, they are needed.
     For instance, a sequence of transformations.
** TODO add
*** TODO rhythm smarts
**** ordinal ops
***** = manipulate sequences by order disregarding timing
     (ordinal but not cardinal).
***** describe ordinal subsets of sequences
****** slices
****** modular arithmetic expressions (e.g. "everything 2 or 3 mod 4")
***** swap two ordinal subsets of a Museq
      They need to not overlap.
**** ? global grid, beat weight map
**** transform rhythm
***** why it's hard
****** non-locality
       Rhythm a collective property of the start times -- they can't be individually modified, but rather must be modified in a manner aware of neighboring notes.
****** quantisation
       One can't stretch start times arbitrarily and expect it to sound good. They need to be stretched in a grid-aware way.
***** apply rhtyhm from one sequence to another
      esp. if the rhythm is shorter.
**** mix ordinal and cardinal
     "For the first 50% of notes, for those falling on an odd beat ..."
**** ? mix slices and modular arithmetic expressions
     "In the first 50% of notes, take the even ones."
*** TODO pitch smarts
**** Distinguish (by, say, gravity): root, chord, scale.
**** Inversions?
**** Voice coordination.
     Order the voices; corrections are applied as needed in order starting from the last voice.
***** "Among these 3 voices, at least 2 should play from the chord."
***** "Any time voices start at the same time ..."
      alternatives
****** Find the next start time and stagger them across the intervening time, per this unit-time rhythm.
****** Pitch one of them up, quiet it, and delay its onset a little.
** TODO BUGs
*** initial splash
**** too many events sound simultaneously when it first starts
*** calling chAll many times in quick succession screws it up
**** example
***** this code screws up
p1 = mm 1 $ pre3 "a" [ (0, 1.5, m1 "freq" 300),
                       (0.5, 1, m1 "on" 0 ) ]
p2 = mm 1 $ pre3 "b" [ (0, 1.5, m1 "freq" 360) ]
p3 = mm 2 $ pre3 "c" [ (0, 1, m1 "freq" 450),
                       (1, 2, m1 "on" 0) ]

chAll $ mfl [ ("1", nBoop $ insertOns p2) ]
chAll $ mfl [ ("1", nBoop $ insertOns p3) ]
chAll $ mfl [
  ("1", nBoop $ insertOns $ cat [p1, p2] ),
  ("2", nBoop $ insertOns p3) ]
***** and yet if I comment out any one call to chAll, it doesn't
* tier-2 priorities
*** schedule a replaceAll
    for, say, the next cycle equal to 0 modulo 16
**** TODO better: schedule for after when `seq` evaluates the `Museq` completely
*** delete duplicate drums
    That is, if two instances of the same sample are scheduled simultaneously, delete one of them. (Or maybe do something else -- maybe de-pitch one of them slightly? But playing the sample twice as loud is jarring.)
*** amplitude group for all drums, all pitched tracks
*** speed
**** see [[id:cbd1f56f-efef-4302-b309-e21ca0c1b677][how to profile in Haskell]]
**** which functions were slow when I profiled
     (certainly before GHC 8.10, and I think before I had 8.8)
     merge, meta, and subfunctions
     see prof/ for details
* TODO misc
** gui
*** motivation: can't understand why it souonds like it does
*** motivation: can't adjust individual notes
** laziness
Because evaluating a whole sequence before playing any of it can cause a huge dealy.
*** ugly compromise: keep both instructions and maybe the data
The data would still be evaluated in its entirely rather than as needed.
But once it is evaluated, it is kept.
** use defaults in, e.g., amp :: (Float -> Float) -> Museq -> Museq
   This might be stale.
   Certainly "amp" and "ampTo", which it refers to, are no longer defined.
*** the idea
   Currently there are both "amp" and "ampTo";
   one takes a function, the other a value.
   I could stick to the one that takes a function,
   if it assumed the default value when that value is not present.
* TODO warp
** a map of a finite set of points from [start,end] to [start,end]
** interpolated
** maybe with no monotonicity constraint
* TODO ? maybe problems && meaning forgotten
** each sample needs to be called by a separate voice
** ./Dispatch/Dispatch.hs: -- todo ? awkward : The Ev' label gets repeated within the Action.
* TODO mmrt1 and the rest of Museq.Mk
** mmho variations to write?
*** rewrite mmho so that duration is last
*** versions that don't expect a name
*** TODO a version that zips (map RTime [0..]) to a list of payloads
    and computes the duration automatically (as the length of the list)
*** a version that doesn't need M.singleton called so much
** unify the many mkMuseq methods
*** illustration of the problem
    (l,time,time,Msg)
    (time,Note)
    etc.
*** idea: add Maybe to Note, and banish bare Msg values in a Museq
    Stop using the Museq ScParams type.
    Instead use Museq Note',
    where Note' is like Note but the synthdef is wrapped in a Maybe.
* TODO mysteries
** TODO Vap doesn't work
   :PROPERTIES:
   :ID:       5b22c523-a6a3-486c-a622-483f0b453e50
   :END:
   at least not for the data sent to Boop in sketches/1.hs.
** TODO is the sccheduling a frame too conservative?
   In Dispatch.replaceAll, there's this:
       when = nextPhase0 time0 frameDuration now + frameDuration
         -- `when` = the end of the first not-yet-rendered frame.
         -- TODO (speed) ? Is this conservative? Do I not need to
         -- `(+ frameDuration)`?
   Theere's a similar addition of a `frameDuration` in `chTempoPeriod`.
** TODO Can it be lazy?
** TODO could it be smarter about `ScAction` size? Does it matter?
*** why I think it's curretly wasteful
    See, e.g., this type signature:
    boopMsg :: Msg -> [Msg' BoopParams]
*** the idea, verbose form
    (see dispatchConsumeScAction_Send and freinds)
    The ScAction type can carry a lot of different parameter instructions, but currently I only send singletons. Does that matter, or is the cost of sending a different ScAction for each parameter negligible?
    Do the Museq-creating helper functions bundle simultaneous parameters into the same ScAction?
* TODO easy
** [[id:5b22c523-a6a3-486c-a622-483f0b453e50][Vap doesn't work]]
** TODO zotOneMsg should not use error
   when it receives an unexpected message
** redundant: ev4 ~ mkEv
** stereo
   http://www.cs.cmu.edu/~music/icm-online/readings/panlaws/index.html
*** try first: the "constant power" rule
 Let L(theta) = cos theta,
     R(theta) = sin theta
 where theta ranges from 0 (left) to pi/2 (right)
*** if that makes the center position too loud
 try the "compromise" described later in the article
** shorthand
*** TODO noteToFreq = ops [("freq", (*) 300 . \p -> 2**(p/12))]
*** ? per parameter, a function to change it or set it if absent
** a chAll that adds names automatically
   Maybe just use big stacks.
** use museqIsValid in join|transform tests
*** and test the new museqIsValid's extra clauses
* TODO refactor using retrie
  Simple sed with these would be tricky -- worry about prefixes, parentheses.
** Time -> ATime (for "absolute time")
after reading Dispatch I'll probably understand what RTime, ATime are
** evStart = evArc . _1, evEnd   = evArc . _2
* TODO more
** important ? missing drums
   tom -- low, high
   cymbal -- ride, crash, cowbell
   woodblock
   clap
   tambourine
** to prevent loud unisons during polyphonic merges
   Use per-voice explicit or random phase|freq variation.
   This way, when a polyphonic Museq is joined with another,
   and the poly one is silent,
   the many voices will not create huge waveform peaks.
** ? the Join functions that accept two kinds of labels are dumb
   They should accept only one kind, in the Monoid class,
   and join them if needed with (<>).
* study the code
** to count imports
   grep "import *Montevideo" -r . -c | sort -n -t: -k2
*** TODO ? A dependency graph would be better.
* PITFALLS
** timeForBoth_toFinish v. timeForBoth_toAppearToFinish
*** the tradeoff
**** timeForBoth_toFinish is "safer"
stack used to be written in terms of timeForBoth_toAppearToFinish,
but that led to this bug

> c2 = dur .~ 2 $ mmh 1 $ pre2 "" $ [ (0, "a") ]
> c2
Museq {_dur = 2 % 1, _sup = 1 % 1, _vec = [Event {_evLabel = "", _evArc = (0 % 1,1 % 1), _evData = "a"}]}
> stack c2 c2
Museq {_dur = 2 % 1, _sup = 1 % 1, _vec = []}
**** timeForBoth_toAppearToFinish can be more efficient
In the case of stack, if the time to repeat is less than the time to play through,
the result of stacking two things can be a lot smaller if they are not looped all the way through.
*** solutions
**** it's not really that timeForBoth_toFinish is "safer"
 I'm sure there's a good way to do it -- just, like, check that it won't fuck up.
**** another, also best-of-both-worlds, solution
 Use timeToFinish,
 but then rewrite the result more concisely if possible.
*** might be a problem with merge
although I've only actually noticed it in stack
* the best licks
2/3
3
7/1
1/3
* old
** supercollider mysteries
*** many voices to one distortion
    These notes are stale; I figured it out.
    See Montevideo.Synth.Distortion.
**** a recent reference
Tom Murphy wrote, May 19, 2020, 4:55 PM:
""" If you want to do the literal version of the above (separate synths, with their output fed into an audio effect), the term you're looking for is audio buses. I can whip up a quick example later, but the functions you need are "synthBefore" (to make sure the execution order is right) and aIn. You then send your signals to an audio bus instead of to bus 0 with "out." """
**** an early reference
 https://we.lurk.org/hyperkitty/list/haskell-art@we.lurk.org/thread/2BZIBR3DDOF3XPZ5UYBXJPYEPSPKIYFH/
*** slow changes, e.g. for slide guitar
** once it's publishable
*** add Cabal install notes. Tom made suggestions in the seventh message of the haskell-art thread, "Vivid: Some code that parses instructions to synths polymorphically"
* refs
** Haksell For All on breaking from a loop gracefully
   http://www.haskellforall.com/2012/07/breaking-from-loop.html
* graph
** split rels v. reify
*** TODO how
**** add type: Reif
 RAtom = RScale [Number]
       | RStr String
       | RNum Number
 RMuseq = RMScale (Museq String Scale)
        | RMNum (Museq String Num)
        | RMMsg (Museq String Msg)
        | RMNote (Museq String Note)
        | RMMeta (Museq String (Museq -> Museq))
 RFunction = RNum2 (Number -> Number)
           | RNum3 (Number -> Number -> Number)
           | RScale2 ([Number] -> [Number])
           | RTransform (Museq -> Museq)
           | RJoin (Museq -> Museq -> Museq)
 Reif = ReifAtom RAtom
      | ReifFunc RFunction
      | ReifParam String Number
      | ReifAt Time Reif
      | ReifToSynth SynthDefEnum (Museq String Msg)
**** add: eval :: Disp -> Rslt -> Addr -> Reif
**** add play  :: Reif -> IO ()
**** leave unchanged: evalSynthParam :: Rslt -> Addr -> Either String Msg
**** make polymorphic: evalParamEvent :: Rslt -> Addr -> Either String a
*** why
 The "_ in <pattern name> at <time>"
 relationship is polymorphic in its first member.

 My two options are to split it into multiple rels
 ("param _ in _ at _", "scale _ in _ at _", etc.)
 or to reify the elements of Dispatch into a single type.

 The first is nicer to code,
 but it means duplicating lots of functions,
 which sucks for the user who has to remember them.
** extend graph language
 parameters (on, amp)
 functions
 function patterns
 scale patterns
** play song from UI
*** modify Hode to let using code add to the UI
** how to cut through the boilerplate in Vivid.Hode?
 HExpr helped, but there ought to be a way to build all those functions from a single HExprF.
