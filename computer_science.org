:PROPERTIES:
:ID:       001d7913-c431-461c-92ae-a6a39394856c
:ROAM_ALIASES: development programming processing "computer science"
:END:
#+title: processing | development
* [[id:35fc7de0-cbbf-466f-80ee-3f7d5eb3d806][sleep as processing]]
* s
** to read : by others on it
*** https://x.com/Franc0Fernand0/status/1945447159739924706?s=19
** Some things are right to forget.
** [[id:52e2587c-3485-45cb-9456-d2c9746b2c4d][dependency inversion]]
** code, the language of
*** Rather than "pitfall", write "danger".
** tools
*** "just" improves on "make"
    with completion at the command line,
    and other improvements.
**** https://github.com/casey/just
** [[id:4f6e7dfd-2b17-474b-9126-714bfb76156e][mutual recursion: an easy example]]
* over my head but cool
** [[id:8c7a55ef-702d-4db9-bede-66ea56a0d97d][Distributors: Unifying Parsers, Printers & Grammars]]
* Like growing a tree vertically before horizontally, rush to integration.
  For instance, in SKG there is a server and a client. I tried to make the API handle more complexity than necessary when receiving the document from Emacs -- it would convey the cursor position, the folded state, maybe other stuff. That was unnecessary, and made closing the cycle difficult.
  More generally, ask what the bare minimum necessary would be to get the app's parts to work together. Find a way to make that *extensible* in the later directions I want, but don't actually extend in those directions before integrating. Even if the app would be absolute garbage without a given feature, if the feature is not necessary for integration, leave it out until after integration works.
* subfields
** [[id:e1f7f6e9-3a9a-4804-91f5-7751d7f4e9b8][algorithms]]
** [[id:627da2c2-2f34-46ac-a6d3-9c625c4ff31d][artificial intelligence]]
** [[id:16127b31-70f5-4098-a5c1-1df7cfc93128][bioinformatics]]
** [[id:9f56873c-b871-49d3-b2ed-93ac63133284][data science]]
** [[id:5b4adbe5-e24a-4dc5-b9fa-eddb3b178131][state machines]]
** [[id:73dcc71c-3277-445b-b6ec-05830e955dad][testing (computer science)]]
** [[id:e5c4db3d-2328-4f79-a2ee-f1f9d2fdfd90][programming idioms]]
* type safety
** [[id:65e6d519-5dad-4631-bc25-8a5b83e580c1][Ad-hoc polymorphism erodes type safety.]]
** surprisingly possible
*** [[id:62247288-ab76-4425-8421-64bee5b5fb05][automatic documentation via constraints]]
* [[id:f2cb05a8-11e3-4260-94b7-f9033d301698][documentation testing]]
* [[id:31fab723-6cfd-4f19-a61e-4b65100504f8][abstractions I like \ computer science]]
* TODO [[id:4bd7f12e-2061-40e9-9e98-683552f40918][contribute to open source projects]]
* TODO [[id:90b6eed6-9e66-44de-bbfd-dfc0385bfa35][software development advice, excellent]]
* TODO [[id:f0689a2d-925c-4360-a428-d4f0857b9680][to learn & computer science]]
* [[id:bd48b7ca-4620-49a0-b5a5-915205f7e78e][good coding habits]]
* [[id:f07ab308-a010-45cb-a39e-a01f0b926c15][pitfalls and responses \ coding]]
* [[id:599c31f4-ebc6-4f17-bf83-bb7f604feb1b][how to do coding problems fast]]
* [[id:31569c10-7b37-4fb0-89b5-522c19b0b184][tests for programmers, some]]
* data structures
** [[id:805ec609-79fb-484a-9272-c42de037d1f5][list comprehension]]
* [[id:4f939263-8a43-42be-98af-5aa3d8854d13][dynamic typing]]
* some concepts from computer science
** [[id:4f29e189-09c2-48f7-98b4-25cadcd43ccd][file extension]]
** [[id:bd3b6d2b-6f8b-4dcc-bd52-fe288d3f0a11][pipe (computer science)]]
* [[id:974cd67d-8c30-414d-aeb0-f832a21e08b4][calculations , some cool]] (if infeasible)
* [[id:d64ec5df-18d1-4a91-bda2-05bed28fc5a9][danger & programming]]
