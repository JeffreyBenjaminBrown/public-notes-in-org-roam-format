:PROPERTIES:
:ID:       80be0156-3e35-499e-a14b-9aa5803e715f
:END:
#+title: big programs in Emacs, managing
* TODO my questions
** What is the event loop?
   When can I have Emacs respond to user input? Is there a callback I can call every time the user presses anything, and another to call every time a file changes?
   How does concurrency work, if at all?
*** see [[id:800dc290-b007-4401-a6cf-3ecd5a6a49be][threads]]
* TODO interesting-looking manual chapters
** 1.3  Conventions
*** 1.3.1 Some terms
** 10 [[id:716a8b8c-28b0-4cb4-83f2-b784b00ff8cc][Evaluation in Emacs]]
** 11   Control structures
** 22   Command loop
** 26   Files
** 31   Positions
** 32   Markers
** 33   Text
** 39   Threads
** 40   Processes
** 41   Display
** 41.1 Refreshing screen
** 41.2 Forcing redisplay
** Appendix D: Tips and conventions
** Appendix G: Standard keymaps
** Appendix H: Standard hooks
* [[id:800dc290-b007-4401-a6cf-3ecd5a6a49be][threads]]
* [[id:91deff58-ad2e-4e16-878a-b59836c027f4][overlays]]
* [[id:47586438-b964-4841-967f-539f91937926][circular lists]]
** "circular objects", but they all look like lists to me.
* type-checking is possible, manually
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Type-Predicates.html
* PITFALL: Evaluation and mutability are hairy. Sequence matters.
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Mutability.html
* records are classes without methods -- just data
** demo according to ChatGPT
(cl-defstruct person
  name
  age)

(setq john (make-person :name "John Doe" :age 30))
(person-name john) ; => "John Doe"
(person-age john)  ; => 30
* would be good to read the entire Emacs Lisp manual
  https://www.gnu.org/software/emacs/manual/elisp.html
* the Emacs manual section on managing big programs
  https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Maintaining
* handy project-aware commands
** "current project" can be defined by the Git folder structure
   or else by EDE, which who cares what that is.
   It ignores .gitignored files
** C-x p g : match a regexp in all files of this project
** C-x p r : query-replace a regexp in all files of this project
** C-x p d : dired to the project's root
