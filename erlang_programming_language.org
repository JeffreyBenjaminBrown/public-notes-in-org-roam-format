:PROPERTIES:
:ID:       c008e013-350c-47c7-9f87-228d1d35b2b3
:END:
#+title: Erlang (programming language)
* refs
** "The" docs? https://www.erlang.org/docs
*** intros
**** Getting Started User's Guide
     https://erlang.org/doc/getting_started/users_guide.html
**** OTP User's Guide
     https://erlang.org/doc/design_principles/users_guide.html
*** reference manuals
**** Erlang Reference Manual
     https://erlang.org/doc/reference_manual/processes.html
**** Erlang STDLIB Reference Manual (includes OTP)
     https://erlang.org/doc/man/gen_statem.html
** Learn You Some Erlang (LYSE)
   https://learnyousomeerlang.com/content
*** TODO RESUME in LYSE at
    https://learnyousomeerlang.com/event-handlers#it-s-curling-time
** [[id:a0f72fa0-6930-4b6b-a570-93a4748895bb][concurrent programming]]
* TODO in Erlang
** TODO "Elixir in Action" is supposedly a good intro to OTP
   https://www.manning.com/books/elixir-in-action-second-edition
*** who recommended it
    https://news.ycombinator.com/item?id=31425301
** TODO learn about static typing
   https://erlang.org/doc/reference_manual/typespec.html
   [[id:25b56f5b-eb2d-46b4-9f97-c3ba0f02484b][some tools for static typing]]
** TODO [[id:77a1ba6e-d657-4579-afe7-d5a95ce7bb74][questions, unresolved]]
** SKIPPED chapters in LYSE
*** [[id:62d43b5f-4411-4726-be7e-671a802595d2][SKIPPED: arrays, sets, queues, graphs]]
*** SKIPPED: "Functionally solving problems in Erlang."
    https://learnyousomeerlang.com/functionally-solving-problems
*** SKIPPED: [[id:38b59abc-ae95-47f2-b23e-d3af81b8d803][standalone `catch`]]
*** SKIPPED: Bit syntax and binary comprehensions.
    https://learnyousomeerlang.com/starting-out-for-real#bit-syntax
* some vocab and notation
** Erlang writes functions as "name/arity".
   e.g. `print/1` for a print function with one argument.
** BIF = built-in function
* using the "shell" (repl)
** Start the shell with `erl` or `rebar3 shell`.
*** [[id:b352deca-445d-4fa1-b80e-ae2ab06d9c3a][Run `erl -pa <path>` to add paths to (user-compiled) .beam files.]]
** Get help: `help().`
   The trailing dot is important.
** clear variable definitions in the shell namespace.
   #delete #clean #undefine
*** Unbind the variable X with `f(X).`.
*** Unbind all variables with `f().`.
*** [[id:93aa1364-b9e5-42ef-ac8c-f6740bae880e][Undefine record types with rf/0 and rf/1.]]
** records and the Erlang shell
   :PROPERTIES:
   :ID:       2d70cd42-4d1d-4df9-91f5-8cb324a19da1
   :END:
*** make a module's records print nicely: rr(Module).
    :PROPERTIES:
    :ID:       ddbc4a6b-942c-4fae-aaf9-9d14481693bc
    :END:
**** PITFALL: it must have an associated .beam file first
     i.e. it needs to have been compiled already
     (although not necessarily in this REPL session).
*** Undefine record types with rf/0 and rf/1.
    :PROPERTIES:
    :ID:       93aa1364-b9e5-42ef-ac8c-f6740bae880e
    :END:
*** rl/0 prints all record definitions, rl/1 prints one.
*** rp(Term) converts a tuple to a record, if possible.
*** directory navitation
    available only iin the shell
**** cd/1: change working directory.
     Good for compiling, loading modules.
**** pwd/0
**** ls/0
** [[id:0dfa99f9-7d57-4d9d-b664-728d6b916ea8][Show and delete messages to the shell with flush/0.]]
** [[id:b56be675-c98d-4d98-b1e3-bba982c6abdb][regs() -- in repl, get more detailed info on all registered processes.]]
** Compile a big program with an Emakefile: [[id:e8298fc5-84b1-46c8-9d78-32d30e6b9b8a][`make:all([load])`]]
* using the compiler
** an alternative: [[id:7d366340-3876-415f-aec1-05108a28fd2b][compiling with rebar3]]
** PITFALL: "unused function" errors can be confusing.
*** Will get one if an unexported function is used internally in `spawn` calls.
    :PROPERTIES:
    :ID:       209c4447-0e85-47dd-b77d-1e759faaf10b
    :END:
**** TODO Why?
*** Will get one if a module [[id:0976ad01-0e93-405e-9b62-76b91e3b8beb][adhering to a behavior]] does not export callbacks the behavior-defining module must call.
** compiling a small program
*** in the repl
    compile:file ( FileName ).
    c ( FileName ).
*** from the command line
    erlc flags file.erl
** compiling a big program
*** First put an Emakefile in the source folder.
**** example
     {'src/*', [ debug_info,
                 {i, "src"},
                 {i, "include"},
                 {outdir, "ebin"}]}.
**** what those options do
     `debug_info` says to include debug info in the (compiled output?).
       It's standard.
     Each `i` pair indicates a folder that should be scanned for code.
     `outdir` is where the compiled .beam files go.
*** Then compile it.
    alternatives
**** run `erl -make`        from the command line
**** run `make:all([load])` from the repl
     :PROPERTIES:
     :ID:       e8298fc5-84b1-46c8-9d78-32d30e6b9b8a
     :END:
     will look for a file named 'Emakefile' in the current directory,
     recompile it (if it changed) and load the new files.
** Run `erl -pa <path>` to add paths to (user-compiled) .beam files.
   :PROPERTIES:
   :ID:       b352deca-445d-4fa1-b80e-ae2ab06d9c3a
   :END:
* using [[id:4bdf5e92-8bf3-498d-9b0a-6febaf854a31][Rebar3 (Erlang build manager)]]
* erlang and emacs
  :PROPERTIES:
  :ID:       3a230207-47a8-4dde-af88-2c442f5c51aa
  :END:
** erlang-indent-current-buffer
** [[id:b1d56ff7-9557-4208-9ed1-28a807fce6f9][Comments should follow %%.]]
* some basic syntax
** "terms"
   an integer, float, atom, string, list, map, or tuple
** Comments follow %%.
   :PROPERTIES:
   :ID:       b1d56ff7-9557-4208-9ed1-28a807fce6f9
   :END:
   or %, but then the Emacs auto-formatting sucks.
** Expressions are only evaluated if they end in a dot and then whitespace.
   I guess the dot without whitespace can be a conjuction.
** Comma-separated expressions are all evaluated, and the last one returned.
** Variables
*** PITFALL: Variable assignment (=) is weird.
    `X = Y` will return the value if they are equal.
    If they are not, it will raise an exception.
    A value can be "reassigned" to a variable as long as it results in no change in the variable's value.
*** How to write variables.
**** Variables must be capitalized.
**** Variables starting with an underscore are normal variables, except the compiler won't complain if they're not used.
     Just like other variables,
     it is not possible to bind them more than once.
** Atoms
   :PROPERTIES:
   :ID:       b83c0167-c0f4-4ba1-9945-46dc4211ee12
   :END:
   are like strings whose names and values are equal.
*** examples
    1> atom.
    atom
    2> atoms_rule.
    atoms_rule
    3> atoms_rule@erlang.
    atoms_rule@erlang
    4> 'Atoms can be cheated!'.
    'Atoms can be cheated!'
    5> atom = 'atom'.
    atom
*** rules
**** characters to use, and where
     should be enclosed in single quotes (') if it does not begin with a lower-case letter or if it contains other characters than alphanumeric characters, underscore (_), or @.
**** max atom length: 255 characters
**** max number of atoms: 1,048,576 by default
*** All atoms are defined.
*** They can't be too long.
*** PITFALL: Don't generate too many (e.g. random) atoms.
    They are not garbage-collected.
*** There are 28 reserved atoms.
**** the idea
     "Some atoms are reserved words and can not be used except for what the language designers wanted them to be: function names, operators, expressions, etc.
**** the reserved atoms
     after and andalso band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse query receive rem try when xor
** Boolean logic
*** `and` and `or` are strict.
    `andalso` and `orelse` are lazy on the right side.
*** PITFALL: true and false are ordinary atoms.
    :PROPERTIES:
    :ID:       4a538e73-e552-486a-8ec8-76772091c0d3
    :END:
   Comparing them with < and > to other things
   is a potential source of error.
** equality tests & type
   They never throw type errors.
   =:= and =/= test for and against equality, and they care about type.
   == and /= do the same thing without caring about type.
** PITFALL: The LTE operator (=<) is written backwards
** PITFALL: Comparison works across types.
   number < atom < reference < fun < port < pid < tuple < list < bit string
** Tuples
   :PROPERTIES:
   :ID:       0e0237a3-8223-45b5-ad9e-b731a5777d9b
   :END:
*** Use brackets {,} to create tuples.
*** Use element/2 to access their elements.
    102> element( 1, {1,2} ).
    1
** Lists
   :PROPERTIES:
   :ID:       93434a34-a3e1-4392-bedd-50b28bb70e4a
   :END:
*** PITFALL: Lists can mix types.
*** hd = head, tl = tail.
    Don't forget the parentheses!
*** (++) joins lists, is right-associative.
*** (--) subtracts a prefix, is right-associative.
    Specifically, it finds the longest prefix of the first argument equal to a prefix of the second argument, and returns the remainder of the first argument.
*** The (|) operator separating "head" from tail is whack.
    The "head" it isolates can be more than one element.

    29> [1|[2,3]].
    [1,2,3]
    30> [1,2|[2,3]].
    [1,2,2,3]
*** PITFALL: Lists can be improper (not null-terminated).
     [1 | 2] creates something that behaves kind of like a list,
     but it doesn't end with [], and as a result (for some reason)
     some uses break. For instance [1 | 2] ++ [2,3] is not defined.
*** list comprehensions
**** a functional example
     1> [2*N || N <- [1,2,3,4]].
     [2,4,6,8]
     2> [ X ||
          X <- [1,2,3,4,5,6,7,8,9,10],
          X rem 2 =:= 0].
     [2,4,6,8,10]
     5> [X+Y ||
         X <- [1,2],
         Y <- [2,3]].
     [3,4,4,5]
*** Evaluating a list of IO operations evaluates them.
    Here's a list comprehension that does IO.
    It returns no value, because it's followed by a (,).

    [ io:format("~p was set free.~n",
   	     [C#cat.name] )
      || C <- Cats ],
    ...
**** [[id:b56fe30d-efdd-4ec3-81b8-8b28840185bf][example: a list comprehension that spawns stuff]]
* modules
** Module consist entirely of attributes and functions.
** name conflicts
*** Functions can share a name if their arities differ.
*** Modules are flat, and hence name conflicts common.
*** Check for name conflicts with `code:clash/0`.
*** "prefix every module name with the name of your project"
    This is common practice.
** The `erlang` prelude is imported implicitly.
** The use of most* definitions must be fully qualified.
   * all definitions not from `erlang`
*** Qualification uses (:), not (.).
    3> c(useless).
    {ok,useless}
    6> useless:hello().
    Hello, world!
    ok
    7>
*** example
    1> erlang:element(2, {a,b,c}).
    b
    2> element(2, {a,b,c}).
    b
    3> lists:seq(1,4).
    [1,2,3,4]
    4> seq(1,4).
    ** exception error: undefined shell command seq/2
** module attributes
*** some module attributes
**** The module name is mandatory.
     `-module(name)`
     where `name` is an atom.
**** export lists
***** are written thus
      `-export ( [ Function1/Arity,
                  ...,
                  FunctionN/Arity ] ).
***** Can be circumvented
      -compile(export_all). %% replace with -export() later, for God's sake!
**** optional explicit imports for individual functions
     Deprecated, according to some guy on StackOverflow.

     -import ( Module,
              [ Function1/Arity,
               ...,
               FunctionN/Arity ] ).
**** `-behavior(ConstrainingModule)`
     :PROPERTIES:
     :ID:       0976ad01-0e93-405e-9b62-76b91e3b8beb
     :END:
***** Is a promise to adhere to the behavior defined in ConstrainingModule.
***** Behaviors are intended to separate generic and specific code.
      The behavior is the generic part.
      A module adhering to it is sometimes called a "callback module".
***** Often (always?) that's a list of required callbacks.
      e.g. the gen_server does this when used as a behavior-constraining module.
***** How to create new behaviors.
      -module(my_behaviour).
      -export([behaviour_info/1]).

      %% Here init/1, some_fun/0 and other/3 are callbacks that must be defined by any code that will use the behavior.
      behaviour_info(callbacks) -> [{init,1}, {some_fun, 0}, {other, 3}];
      behaviour_info(_) -> undefined.
**** There are many more.
*** functions to retrieve a module's attributes
    Use module_info/0 to get them all.
    Use module_info/1 to get one of them.
** TODO Header inclusion: Why? Why not?
   :PROPERTIES:
   :ID:       b2d67f91-7509-45ca-bfd9-77fe1aaff43e
   :END:
*** my hunch
    is that it's just to avoid having to qualify names,
    particularly those of record accessors.
*** my StackOverflow question about it
    https://stackoverflow.com/questions/69065641/why-does-erlang-offer-both-import-for-modules-and-include-for-headers
*** LYSE talks about it here
    https://learnyousomeerlang.com/a-short-visit-to-common-data-structures
* pattern matching
** an example
  greet(male, Name) ->
    io:format("Hello, Mr. ~s!", [Name]);
  greet(female, Name) ->
    io:format("Hello, Mrs. ~s!", [Name]);
  greet(_, Name) ->
    io:format("Hello, ~s!", [Name]).
** COOL: A variable can appear more than once in a pattern.
   same(X,X) ->
     true;
   same(_,_) ->
     false.
** named patterns
   valid_time( { Date = {Y,M,D},
                 Time = {H,Min,S} } ) -> ...
** guards
*** use the `when` keyword.
    old_enough_to_drive(X) when X >= 16 -> true;
    old_enough_to_drive(_) -> false.
*** Join guards lazily with commas (and) and semicolons (or).
   right_age(X) when X >= 16, X =< 104 ->
     true;
   right_age(_) ->
     false.
   wrong_age(X) when X < 16; X > 104 ->
     true;
   wrong_age(_) ->
     false.
*** PITFALL: Guards do not accept user-defined functions.
    because of side effects.
*** PITFALL: (;) and (,) treat errors unlike `orelse` and `andalso`.
    https://learnyousomeerlang.com/syntax-in-functions
    """ Note: I've compared , and ; in guards to the operators andalso and orelse. They're not exactly the same, though. The former pair will catch exceptions as they happen while the latter won't. What this means is that if there is an error thrown in the first part of the guard X >= N; N >= 0, the second part can still be evaluated and the guard might succeed; if an error was thrown in the first part of X >= N orelse N >= 0, the second part will also be skipped and the whole guard will fail.

    However (there is always a 'however'), only andalso and orelse can be nested inside guards. This means (A orelse B) andalso C is a valid guard, while (A; B), C is not. Given their different use, the best strategy is often to mix them as necessary."""
** [[id:393f4ace-8cb5-45a4-9087-b959e381b641][pattern matching on records]]
* macros
** user-defined macros
   A 'function' macro could be written as
     -define(sub(X,Y), X-Y).
   and used like
     ?sub(23,47),
   later replaced by 23-47 by the compiler.
** The ?MODULE macro returns the current module's name.
   :PROPERTIES:
   :ID:       f92bc235-73f0-46f8-b34f-57f6002878a7
   :END:
   It's useful, e.g., for writing a helper function in module M
   that spawns another function also defined in module M:

   start(FoodList) ->
       spawn( ?MODULE,
    	  fridge2,
    	  [FoodList] ).
* functions
** expression blocks
   Commas can separate expressions.
   The last is returned, all are evaluated.

   add(A,B) ->
     something, // will be evaluated
     something, // will be evaluated
     A + B.     // will be evaluated and returned
** Every function returns something.
** The last "function clause" ends in a period.
   The others are terminated by commas.
   A clause defines how to process an input pattern.
** recursion
*** via guards
    fac(0) -> 1;
    fac(N) when N > 0 -> N*fac(N-1).
*** via pattern matching
    len([]) -> 0;
    len([_|T]) -> 1 + len(T).
*** tail recursion and accumulators
**** the trick
     Define f(args), where args do not match the base case,
     as nothing more than f(different args).
***** Note that g( f( different args) ) won't cut it.
**** some examples
***** an example
      tail_fac(N) -> tail_fac(N,1).
      tail_fac(0,Acc) -> Acc;
      tail_fac(N,Acc) when N > 0 -> tail_fac(N-1,N*Acc).
***** my own length function
      len( X ) -> len( X, 0 ).
      len( [], N ) ->
	N;
      len( [_|X], N ) ->
	len(X,N+1).
**** There might be multiple base cases.
     And if so, the pattern match might need a guard.

     take(_,0) -> [];
     take([],_) -> [];
     take([H|T],N) when N > 0 -> [H|take(T,N-1)].
** higher-order functions
*** They are called naturally.
    -module(hof).

    one() -> 1.
    two() -> 2.

    add(X,Y) -> X() + Y().
*** They are specified awkwardly.
    Precede higher-order arguments with the `fun` keyword.
    hhfuns:add(
      fun hof:one/0,
      fun hof:two/0).
** anonymous functions
   #lambda
*** syntax
    fun(Args1) ->
   	 Expression1, Exp2, ..., ExpN;
       ...
       (Args3) ->
   	 Expression1, Exp2, ..., ExpN
    end
*** PITFALL: scope, inheritance, shadowing
    Here, the inner lambda inherits A from its parent's scope,
    so the comparison A=2 always fails.
    base() ->
        A = 1,
        (fun() -> A = 2 end)().

    But here the outer A bound to 1 is shadowed,
    by the A argument to the inner lambda,
    so the result of base() is a function that can succeed for some inputs
    (specifically the input 1).
    base() ->
        A = 1,
        (fun(A) -> A = 2 end)(2).
*** "named anonymous functions" permit recursion.
    For instance, evaluate the following in the shell,
    and it will print the "Call Batman!" message forever.

    PrepareAlarm = fun(Room) ->
       io:format("Alarm set in ~s.~n",[Room]),
        fun Loop() ->
           io:format("Alarm tripped in ~s! Call Batman!~n",[Room]),
           timer:sleep(500),
           Loop()
        end
    end.
    AlarmReady = PrepareAlarm("bathroom").
    AlarmReady().
* if expressions
  #conditional
** They can be avoided entirely.
   Case expressions are more general.
** They are weird. Here are [[id:c1784f19-4e51-4239-8178-c074251b63aa][some if expressions in Erlang]].
** They resemble case expressions.
   if <case> -> <result>;
      <case> -> <result>;
      ...
   end.
** Some branch should evaluate.
   :PROPERTIES:
   :ID:       9803244e-0369-4b35-927d-de0fd043aee1
   :END:
   Because every expression should return something,
   and if expressions are expressions.
** Default `true` conditions (`else` in other languages) are deprecated.
* case expressions
** syntax look like Haskell
   case <condition> of
     <value> -> <result>;
     <value> -> <result>;
     ...
   end
*** PITFALL: Trailing period only if it's the last expression!
** [[id:9803244e-0369-4b35-927d-de0fd043aee1][Some branch should evaluate.]]
** can include guards ("when" clauses)
   case Temperature of
     {celsius, N} when N >= 20, N =< 45 -> <result>;
* types
** Erlang is strongly but dynamically typed.
   There are no implicit conversions.
   Type errors are only caught at runtime.
** (explicit) type conversion
   These are all in the `erlang` namespace,
   and not imported by default.
*** some of those functions
    atom_to_binary/2
    atom_to_list/1
    binary_to_atom/2
    binary_to_existing_atom/2
    binary_to_list/1
    bitstring_to_list/1
    binary_to_term/1
    float_to_list/1
    fun_to_list/1
    integer_to_list/1
    integer_to_list/2
    iolist_to_binary/1
    iolist_to_atom/1
    list_to_atom/1
    list_to_binary/1
    list_to_bitstring/1
    list_to_existing_atom/1
    list_to_float/1
    list_to_integer/2
    list_to_pid/1
    list_to_tuple/1
    pid_to_list/1
    port_to_list/1
    ref_to_list/1
    term_to_binary/1
    term_to_binary/2
    tuple_to_list/1
** type tests
   is_atom/1           is_binary/1
   is_bitstring/1      is_boolean/1        is_builtin/3
   is_float/1          is_function/1       is_function/2
   is_integer/1        is_list/1           is_number/1
   is_pid/1            is_port/1           is_record/2
   is_record/3         is_reference/1      is_tuple/1
** static typing, some tools for
   :PROPERTIES:
   :ID:       25b56f5b-eb2d-46b4-9f97-c3ba0f02484b
   :END:
*** TypEr generates type signatures.
*** Dialyzer typechecks.
*** There are more such tools.
** some types
*** [[id:b83c0167-c0f4-4ba1-9945-46dc4211ee12][Atoms]]
**** [[id:4a538e73-e552-486a-8ec8-76772091c0d3][PITFALL: true and false are ordinary atoms.]]
*** [[id:0e0237a3-8223-45b5-ad9e-b731a5777d9b][Tuples]]
*** [[id:93434a34-a3e1-4392-bedd-50b28bb70e4a][Lists]]
*** records
**** [[id:2d70cd42-4d1d-4df9-91f5-8cb324a19da1][records and the Erlang shell]]
**** Records are just tuples in Erlang.
**** [[id:ddbc4a6b-942c-4fae-aaf9-9d14481693bc][to make records print nicely]]
**** accessing record fields
***** example
      RobTheRobot # module.bestFriend # robot.name.
***** Field accessors (like "details" and "name" below) must be qualified with the module name.
***** (#) is left-associative, hence chains naturally.
**** PITFALL: Accessors are integers, kind of.
     If `name` is the second field of the record type `gobot`,
     then this monstrosity evaluates:

     104> #gobot.name.
     2
     105> 1 + #gobot.name.
     3
**** pattern matching on records
     :PROPERTIES:
     :ID:       393f4ace-8cb5-45a4-9087-b959e381b641
     :END:
***** examples
      admin_panel(#user{name=Name, group=admin}) ->
          Name ++ " is allowed!";
      ...

      adult_section(U = #user{}) when U#user.age >= 18 ->
          %% Show naughty stuff.
          allowed;
      ...
***** Fields can be omitted -- even all of them.
****** PITFALL: The {}s must still be written when omitting all fields.
       test_is_state (_ = #state{}) ->
         is_state;
       test_is_state (_) ->
         is_not_state.
**** record "updates"
     Remember, data is immutable.

     repairman(Rob) ->
         Details = Rob#robot.details,
         NewRob = Rob#robot{details=["Repaired by repairman"|Details]},
         {repaired, NewRob}.
*** maps
**** the default `maps` library
     https://learnyousomeerlang.com/maps
     Hash maps.
     Recent (added in version R17).
     Nice special syntax.
**** some non-prelude map libraries
***** dict    - simple  maps that scale well
***** gbtrees - complex maps that scale well
      "General balanced trees."
      For *some* things, better than dicts.
***** orddict - simple  maps that scale badly
****** Good to about 75 elements.
****** Some important functions
******* orddict:store/3,
******* orddict:find/2
	when you do not know whether the key is in the dictionaries
******* orddict:fetch/2
	when you know it is there or that it must be there
******* orddict:erase/2.
*** SKIPPED: arrays, sets, queues, graphs
    :PROPERTIES:
    :ID:       62d43b5f-4411-4726-be7e-671a802595d2
    :END:
    https://learnyousomeerlang.com/a-short-visit-to-common-data-structures
* [[id:f68891f2-deaf-47f7-9f8e-ed2ff9f69811][exceptions]]
* [[id:8bd1818b-7da8-4c6b-b35e-93f54ef5a0d7][concurrency in Erlang]]
* hot code loading
** Erlang's `code server` can maintain two running versions of a module.
** `local` vs. `external` calls
   Local calls are local to that module,
   and look like `function(args)" rather than "module:function(args)".
** External calls always call the newest version of a module.
** External recursive calls thus let an actor change its own code.
   Qualify a recursive call with ?MODULE
   and it will load the new version of the module.
*** example
    -module(hotload).
    -export([server/1, upgrade/1]).

    server(State) ->
      receive
	update ->
          NewState = ?MODULE:upgrade(State),
          ?MODULE:server(NewState);  %% loop in the new version of the module
	SomeMessage ->
          %% do something here
          server(State)  %% stay in the same version no matter what.
      end.

    upgrade(OldState) ->
      %% transform and return the state here.
** PITFALL: Third generations are killed by the VM.
   "If you load a third version of a module while a process still runs with the first one, that process gets killed by the VM, which assumes it was an orphan process without a supervisor or a way to upgrade itself. If nobody runs the oldest version, it is simply dropped and the newest ones are kept instead."
* misc
** the Erlang Foreign Function Interface (FFI)
   https://github.com/joergen7/effi
** state: Use recursion to model it.
   Recursion can do anything state could.
**** example
     This fridge "stores" food new food
     by calling itself with an updated argument.

     fridge2(FoodList) ->
         receive
          {From, {store, Food}} ->
              From ! {self(), ok},
              fridge2([Food|FoodList]);
          {From, {take, Food}} ->
              case lists:member(Food, FoodList) of
                  true ->
                      From ! {self(), {ok, Food}},
                      fridge2(lists:delete(Food, FoodList));
                  false ->
                      From ! {self(), not_found},
                      fridge2(FoodList)
              end;
          terminate ->
              ok
         end.
** printing
   https://erlang.org/doc/man/io.html#format-3
*** rp/1 prints an arbitrary term.
*** io:format/2: some instructive examples
    io:format("~s~n",[<<"Hello">>]),
    io:format("~p~n",[<<"Hello">>]),
    io:format("~~~n"),
    io:format("~f~n", [4.0]),
    io:format("~30f~n", [4.0]).
*** Use ~p to print many kinds (any kind?) of data.
    io:format( "~p~n", [[2,{3,4},"hi",5]] ).
** time
*** timer:sleep/1 -- pause for a number of ms
*** converting a date to a duration
    time_to_go(TimeOut={{_,_,_}, {_,_,_}}) ->
      Now = calendar:local_time(),
      ToGo = calendar:datetime_to_gregorian_seconds(TimeOut) -
        calendar:datetime_to_gregorian_seconds(Now),
      ...
*** validating a date
    {{Y,M,D},{H,Min,S}} format

    There's something builtin to validate the {Y,M,D},
    but nothing for the {H,M,S} part.
**** Here's something that does both.
     valid_datetime({Date,Time}) ->
       try
         calendar:valid_date(Date) andalso valid_time(Time)
       catch
         error:function_clause ->
           %% not in {{Y,M,D},{H,Min,S}} format
           false
       end;
     valid_datetime(_) ->
       false.

     valid_time({H,M,S}) -> valid_time(H,M,S). % artiy 1 -> arity 3
     valid_time(H,M,S) when H >= 0, H < 24,
     		       M >= 0, M < 60,
     		       S >= 0, S < 60 -> true;
     valid_time(_,_,_) -> false.
** apply/3
   apply (Module, Function, Args)
   seems to run Module:Function against Args.
** [[id:1029a65f-378c-4438-bd72-37e5aedbf93e][HTTP in Erlang: the Inets library]]
