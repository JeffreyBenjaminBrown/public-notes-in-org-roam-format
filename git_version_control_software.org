:PROPERTIES:
:ID:       e76bfca8-f61d-45a2-908f-bad416a7c304
:ROAM_ALIASES: git
:END:
#+title: git (version control software)
* [[id:39b1baa1-4108-4aac-a8e0-ec662b531523][fetch all branches from all remotes \ git]]
* [[id:92ad6660-1efc-4ba8-b1d1-edddc2b54455][anchor, to create one in Github-flavored markdown]]
* [[id:635a2a66-13f6-40e3-a5f3-ead78eb1e7b9][diff modulo base]] (integrates with Git)
* make diff without running through diff-so-fancy
  git --no-pager diff
* [[id:2a580607-a59b-408d-b27c-b6c4dd94a14b][git submodules]]: for nesting repositories
* git add -p
  to cherry-pick the changes in a file to commit
* good git habits
** [[id:380d6262-78d1-4811-bc58-f5331c00c7ba][Check the branch before each use of git.]]
* configure Git so Emacs is the default editor
  :PROPERTIES:
  :ID:       70269641-9c54-4bd8-93f8-6554005a913c
  :END:
  git config --global core.editor "emacs -nw"
    # -nw: use Emacs at the command line (not via the gui)
* [[id:d0d72bb0-f308-4fa0-9e7f-e0d78a22b118][Make git diffs readable by including empty lines.]]
* [[id:6e66c817-c802-4b37-9467-4bfa61f3965b][Unindexed files are fragile.]]
* Copy a commit to a different branch.
  git checkout <new branch where I want the same commit>
  git cherry-pick <commit id>
* to merge upstream changes into a fork
  git checkout master
  git fetch upstream
  git merge upstream/master
    or
      git merge remotes/upstream/master # PITFALL: Not sure
        # why sometimes I need the `remote/` prefix.
    or
      git merge remotes/upstream/main
    or something like that
* to *rename* a branch locally and remotely
** git branch -m new-name
** git branch -D old-name
** git push origin --delete old-name
   where "origin" is the remote repo's local nickname
* to *delete* a branch locally and remotely
** how
   # PITFALL: The `prune` step is necessary.
   # See its comment for why.

   remote=origin               # or something
   branch=tricky-feature       # or something
   git push $remote -d $branch # deletes $branch on the remote
   git branch       -d $branch
   git remote prune $remote    # drops $branch from local record of remote
** PITFALL: Will need to similarly `prune` any other clones.
* rewriting the commit history
** [[id:2bf0e5bf-4104-45f3-8e1c-e90a36c4314f][git rebase]]
** squash the last N commits into a single commit
   N=3
   git reset --soft HEAD~$N
   git commit -m "new commit message"
   git push -f
* [[id:e6dc1949-5024-4fee-b031-7af412353a5e][diff (shell programming concept)]]
