:PROPERTIES:
:ID:       e76bfca8-f61d-45a2-908f-bad416a7c304
:ROAM_ALIASES: git
:END:
#+title: git (version control software)
* [[id:2a580607-a59b-408d-b27c-b6c4dd94a14b][git submodules]]: for nesting repositories
* git add -p
  to cherry-pick the changes in a file to commit
* good git habits
** [[id:380d6262-78d1-4811-bc58-f5331c00c7ba][Check the branch before each use of git.]]
* configure Git so Emacs is the default editor
  :PROPERTIES:
  :ID:       70269641-9c54-4bd8-93f8-6554005a913c
  :END:
  git config --global core.editor "emacs -nw"
    # -nw: use Emacs at the command line (not via the gui)
* [[id:d0d72bb0-f308-4fa0-9e7f-e0d78a22b118][Make git diffs readable by including empty lines.]]
* [[id:6e66c817-c802-4b37-9467-4bfa61f3965b][Unindexed files are fragile.]]
* Copy a commit to a different branch.
  git checkout <new branch where I want the same commit>
  git cherry-pick <commit id>
* to merge upstream changes into a fork
  git checkout master
  git fetch upstream
  git merge upstream/master
    or
      git merge remotes/upstream/master # PITFALL: Not sure
        # why sometimes I need the `remote/` prefix.
    or
      git merge remotes/upstream/main
    or something like that
* to rename a branch locally and upstream
** git branch -m new-name
** git branch -D old-name
** git push origin --delete old-name
   where "origin" is the remote repo's local nickname
* [[id:2bf0e5bf-4104-45f3-8e1c-e90a36c4314f][git rebase: rewrite history]]
* to fetch all branches
** code
   git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
   git fetch --all
   git pull --all
** source
   https://stackoverflow.com/a/10312587/916142
* [[id:e6dc1949-5024-4fee-b031-7af412353a5e][diff (shell programming concept)]]
