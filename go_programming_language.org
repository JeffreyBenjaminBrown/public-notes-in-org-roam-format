:PROPERTIES:
:ID:       3924c945-e600-453f-be00-b2fb24d65f17
:ROAM_ALIASES: Go
:END:
#+title: Go (programming language)
* refs
** [[id:0f5264a6-d638-4ba2-8604-28f024216d34][Borgo is an improved Go.]]
** the Go docs
   https://golang.org/doc/
** [[id:6da96e36-5198-4bd8-8741-eb2072106318][Search for packages or symbols.]]
** RESUME here
   My code and their webpage:

   ~/code/go/go-experim/error.go
   https://tour.golang.org/methods/20
** a good list of things to read
   https://go.dev/tour/concurrency/11
* pros
** static typing
** generics (recent)
** concurrency is built-in, lightweight, channel-based
** small, easy to learn
** huge user base
* cons
** no sum types
* running, building and installing
** "go run" compiles and runs, without creating a binnary
   It's useful for the dev cycle, when making many changes.
** "go build" creates an executable.
** "go install" makes executables globally available.
   Run
     go list -f '{{.Target}}'
   to find Go's "install path".
   Run
     go install
   to put the executable there.
   Add the Go install path to my PATH
   to make everything there globally available.
** [[id:27d7d419-d743-4d65-9f23-de99820f712d][execution order]] in Go
** tests in Go
   :PROPERTIES:
   :ID:       ae748d4d-eb68-4f48-b73b-af28eae5c323
   :END:
   I have some example code at
   ~/code/go/go1/greetings/greetings_test.go
*** "[Tt]est" matters in the names of files and functions
**** next to y.go, put y_test.go
     The _test suffix to the basename lets Go know it's a test.
**** test functions should start with "Test"
*** test functions take a pointer to testing.T as an argument
*** run tests
    from the folder containing them, with
      go test
* [[id:b27c658d-b043-4785-893f-64fce5f524ab][imports in Go]]
* [[id:95cb96bd-765c-4525-b51a-3affbf103d4b][Go syntax]]
* [[id:ae748d4d-eb68-4f48-b73b-af28eae5c323][testing in Go]]
* [[id:f606e719-affa-4b04-b339-39cd13ba8693][concurrency in Go]]
* some libraries
** [[id:48e416b3-4fa4-4121-af20-3b684f19c1ec][time in Go]]
** [[id:466947c0-d814-43a5-bdae-8a20fd501183][filepaths]]
* solutions
** print a thing's type or value
   Use %T or %v in a function from the `fmt` package:

   func describe(i I) {
     fmt.Printf("(%v, %T)\n", i, i)
   }
** strings
*** concatenate strings
    https://golangdocs.com/concatenate-strings-in-golang
    The easiest way is with (+):
      "x" + " " + "y"
*** trim the whitespace at the edges of a string
    strings.TrimSpace
** file IO
   ~/code/go/experim/file_io/
** get the stack trace
   panic ( "optional message" )
