:PROPERTIES:
:ID:       3924c945-e600-453f-be00-b2fb24d65f17
:END:
#+title: Go (programming language)
* refs
** the Go docs
   https://golang.org/doc/
** RESUME here
   My code and their webpage:

   ~/code/go/go-experim/error.go
   https://tour.golang.org/methods/20
* running, building and installing
** "go run" compiles and runs, without creating a binnary
   It's useful for the dev cycle, when making many changes.
** "go build" creates an executable.
** "go install" makes executables globally available.
   Run
     go list -f '{{.Target}}'
   to find Go's "install path".
   Run
     go install
   to put the executable there.
   Add the Go install path to my PATH
   to make everything there globally available.
** [[id:27d7d419-d743-4d65-9f23-de99820f712d][execution order]] in Go
** tests in Go
   :PROPERTIES:
   :ID:       ae748d4d-eb68-4f48-b73b-af28eae5c323
   :END:
   I have some example code at
   ~/code/go/go1/greetings/greetings_test.go
*** "[Tt]est" matters in the names of files and functions
**** next to y.go, put y_test.go
     The _test suffix to the basename lets Go know it's a test.
**** test functions should start with "Test"
*** test functions take a pointer to testing.T as an argument
*** run tests
    from the folder containing them, with
      go test
* [[id:b27c658d-b043-4785-893f-64fce5f524ab][imports in Go]]
* [[id:95cb96bd-765c-4525-b51a-3affbf103d4b][Go syntax]]
* [[id:ae748d4d-eb68-4f48-b73b-af28eae5c323][testing in Go]]
* solutions
** print a thing's type or value
   Use %T or %v in a function from the `fmt` package:

   func describe(i I) {
     fmt.Printf("(%v, %T)\n", i, i)
   }
** concatenate strings
   https://golangdocs.com/concatenate-strings-in-golang
   The easiest way is with (+):
     "x" + " " + "y"
