:PROPERTIES:
:ID:       3924c945-e600-453f-be00-b2fb24d65f17
:END:
#+title: Go (programming language)
* refs
** the Go docs
   https://golang.org/doc/
** RESUME here
   My code and their webpage:

   ~/code/go/go-experim/error.go
   https://tour.golang.org/methods/20
* to search for Go packages
  https://pkg.go.dev/search
* running Go code
** dependency tracking in Go
*** ref: a terribly procedural explanation
    https://golang.org/doc/tutorial/call-module-code
*** to install everything in a program's import statements
    go mod tiny
*** naming and tracking folders
**** Each code folder (I guess?) gets tracked separately.
**** Standard practice is to prefix the library names with "<my id>/", where <my id> is a symbol nobody else will use.
**** example code: How I've been doing it
     In a folder called
       hello/
     I'll run
       go mod init hello
*** seeing one folder from another
    If code folder X is to refer to functions in code folder Y,
    then code from X should say something like "import <name of y>",
    e.g. "import jbb/y".
    For that to work, run something like this from code folder X:
      go mod edit -replace jbb/y=<path/to/y>
    for instance
      go mod edit -replace jbb/y=../y
*** replace v. require
    `replace` is used to redirect to local modules.
    For "published" ones,
    a `require` statement is written instead to `go.mod`.
    An example is
      require example.com/greetings v1.1.0
** running, building and installing
*** "go run" compiles and runs, without creating a binnary
    It's useful for the dev cycle, when making many changes.
*** "go build" creates an executable.
*** "go install" makes executables globally available.
    Run
      go list -f '{{.Target}}'
    to find Go's "install path".
    Run
      go install
    to put the executable there.
    Add the Go install path to my PATH
    to make everything there globally available.
** `init` functions
   In *any* module, not just the top of the hierarchy,
   an `init` function can be defined,
   which executes "after global variables have been initialized".
** tests in Go
   :PROPERTIES:
   :ID:       ae748d4d-eb68-4f48-b73b-af28eae5c323
   :END:
   I have some example code at
   ~/code/go/go1/greetings/greetings_test.go
*** "[Tt]est" matters in the names of files and functions
**** next to y.go, put y_test.go
     The _test suffix to the basename lets Go know it's a test.
**** test functions should start with "Test"
*** test functions take a pointer to testing.T as an argument
*** run tests
    from the folder containing them, with
      go test
* [[id:95cb96bd-765c-4525-b51a-3affbf103d4b][Go syntax]]
* [[id:ae748d4d-eb68-4f48-b73b-af28eae5c323][testing in Go]]
* solutions
** print a thing's type or value
   Use %T or %v in a function from the `fmt` package:

   func describe(i I) {
     fmt.Printf("(%v, %T)\n", i, i)
   }
** concatenate strings
   https://golangdocs.com/concatenate-strings-in-golang
   The easiest way is with (+):
     "x" + " " + "y"
