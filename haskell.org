:PROPERTIES:
:ID:       784007e7-b851-4988-beaa-b8e4a9657357
:END:
#+title: Haskell
* u
** ghciwatch reloads modified files
   https://mercury.com/blog/announcing-ghciwatch
** Simulated IO for Haskell
   https://engineering.iog.io/2023-04-14-io-sim-annoucement/
** https://nicolast.github.io/development/testing-concurrent-code-using-dejafu/
** https://serokell.io/blog/haskell-in-production-meta
** [[id:62247288-ab76-4425-8421-64bee5b5fb05][automatic documentation via constraints]]
** GHC has had type in type since 8.0, per this
   https://news.us10.list-manage.com/track/click?u=49a6a2e17b12be2c5c4dcb232&id=c2e7670a58&e=2441513057
** Kinds don't really exist
   https://news.us10.list-manage.com/track/click?u=49a6a2e17b12be2c5c4dcb232&id=c2e7670a58&e=2441513057
** [[id:65e6d519-5dad-4631-bc25-8a5b83e580c1][Ad-hoc polymorphism erodes type safety.]]
* New in Haskell <2023-07-16>: effectfull and record hpdates
** https://discourse.haskell.org/t/coming-back-after-a-few-years-away-from-haskell-whats-changed/6849
* TODO [[id:72ceb545-15a3-4595-b6f5-d18158829c68][Bogotá Functional Programming Interest Group]]
* [[id:fddbb2ae-0d7f-482c-88f1-0861b7d45546][Haskell, to read]]
* PITFALL: (Cabal?) REPL can't reload changes in depended-on projects.
  Evidence:

jeff@jbb-dell:cabal-experim$ tree
.
├── cabal.project
├── P1
│   ├── app
│   │   ├── Lib.hs
│   │   └── Main.hs
│   └── P1.cabal
└── P2
    ├── P2.cabal
    └── src
        └── MyLib.hs

jeff@jbb-dell:cabal-experim$ cabal repl P1 P2
cabal: Cannot open a repl for multiple components at once. The targets 'P1'
and 'P2' refer to different components.

The reason for this limitation is that current versions of ghci do not support
loading multiple components as source. Load just one component and when you
make changes to a dependent component then quit and reload.
* [[id:cbd1f56f-efef-4302-b309-e21ca0c1b677][how to profile in Haskell]]
* [[id:ffa6b210-d70c-4445-b0ed-87e3c6da00a7][To use a different version of GHC in Nix]]
* [[id:aff56e74-c216-42e5-a92b-c6e3793a3d7d][list comprehensions in Haskell]]
* debugging in Haskell
** [[id:ca586cff-5010-4624-8886-9d53915e5469][Debug.Trace.trace (Haskell library) is magic]]
* testing in Haskell
** [[id:2cef696d-5d06-4b95-b22f-94bf819e4f68][QuickCheck and Microspec]]
** [[id:f9f18c7f-b96a-4986-b772-23efbcac60cf][HUnit (Haskell testing library)]]
** [[id:162e24c7-0a09-439f-b3e7-de38af6a9f9e][property-based testing of stateful systems in Haskell]]
* lenses in Haskell
** Generate lenses for third-party libraries in Haskell
   https://ai-jobs.net/?rdt_cid=3040091042633392170
* Haskell stuff I'd like to use
** [[id:6a0a3cef-e956-443f-b6e1-58f1a98f3998][Dunai: reactive monad generalizes many FRP idioms.]]
** Dunai: a reactive monad generalizes many FRP idioms
   https://hackage.haskell.org/package/dunai
** [[id:42458f39-c09a-4af4-82da-1bd74967b046][Yi is a Haskell library for building text editors.]]
** PostgREST: Make a db API-modifiable
   https://postgrest.org/en/v8.0/index.html
** data-interval
   :PROPERTIES:
   :ID:       08945d69-be8f-4302-a633-e2569183f551
   :END:
   https://hackage.haskell.org/package/data-interval-2.1.1
** Hedgehog for websites
   https://quickstrom.io/
* laziness and strictness in Haskell
  [[id:a2c7b53c-4728-407a-8f2e-35d4e0a20138][Making Invalid Laziness Unrepresentable (article)]]
* Haskell language extensions
** Pattern synonyms
   {-# LANGUAGE PatternSynonyms #-}

   pattern F :: Int -> Int -> Foo
   pattern F f s = Foo f s

   Which abbreviates a frequently used constructor.
   Works in pattern matches too.
* IO and effects systems in Haskell
** The Handle pattern simplifies IO in Haskell.
   https://jaspervdj.be/posts/2018-03-08-handle-pattern.html
** how semantics (e.g. order of evaluation) differ across libraries
   "The effect semantics zoo", Alexis King:
   https://github.com/lexi-lambda/eff/blob/8c4df4bf54faf22456354be18095b14825be5e85/notes/semantics-zoo.md
* language pitfalls
** Type signatures inside function definitions need ScopedTypeVariables.
   https://serokell.io/blog/universal-and-existential-quantification

   example :: a -> [a] -> [a]
   example x rest = pair ++ rest
     where
       pair :: [a]
       pair = [x, x]
   It seems reasonable because it looks like both functions are referring to the same type variable a. However, GHC is actually inserting an implicit forall in both functions. In other words, each function has its own type variable a.
** [[id:58d58f75-aeff-4cf4-a6cb-9a6401726aec][order matters in the let clause of a comprehension]]
* solutions
** [[id:9c31bbf8-2396-4329-a5df-be769f8679b7][Haskell & outline-mode]]: fold Haddock-style headings
** [[id:4b8fb6bb-54de-44bc-a9e4-47c39721b371][list comprehensions to bind a variable number of variables]]
** for space leaks
   [[id:a2c7b53c-4728-407a-8f2e-35d4e0a20138][Making Invalid Laziness Unrepresentable (article)]]
** converting to Floating types
   GHC.Real.realToFrac :: (Real a, Fractional b) => a -> b
   It's not part of any typeclass.
** dynamic programming in Haskell via lazy self-reference
   :PROPERTIES:
   :ID:       e933a77d-2304-4b84-93e3-27963bad5386
   :END:
   https://fpunfold.com/2022/01/09/haskell-dp.html
** the "cabal: Version mismatch between ghc and ghc-pkg" error
   It happened when I ran `cabal repl`.
   I solved it by deleting `dist-newstyle/` and rebuilding.
** [[id:2a224c00-fb0a-45a4-933b-bdf03d52d9de][random numbers and probability in Haskell]]
** PTIFALL: stack gchi: if no libraries are available
 https://github.com/commercialhaskell/stack/issues/5037
 This will load all non-broken modules when some are broken.
   stack exec -- ghci -Wall
   :l Hode.Hode
* some Haskell libraries
** Charts in Haskell
   https://np.reddit.com/r/haskell/comments/12dcap5/announcing_prettychart01/
** [[id:3b228889-90e2-464f-809a-5fb77fd8262f][concurrency in Haskell]]
** [[id:ca586cff-5010-4624-8886-9d53915e5469][Debug.Trace (Haskell library) is magic]]
** [[id:3c92b639-c552-42d7-87e2-7fd1cf560f74][System.Random (Haskell library)]]
** [[id:2cef696d-5d06-4b95-b22f-94bf819e4f68][QuickCheck (Haskell library)]]
* [[id:ff000aad-c6d6-4abd-83b4-5f216c85879b][Haskell programmers I know]]
* [[id:4084526f-b399-4c7d-ada1-d99aa1aece16][why I like Haskell]]
