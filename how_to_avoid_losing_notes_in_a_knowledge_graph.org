:PROPERTIES:
:ID:       9e45ccd9-d6e0-4870-8f13-cc11135334d0
:END:
#+title: how to avoid losing notes in a knowledge graph
* TODO How should your knowledge graph prompt you to read?
** That is, outside of it, other people's work
* [[id:ce9e0a8d-19fa-48eb-9d0e-6cedcb0fdc99][notes, how to take]]
* file each new note well, although not excessively
** choose its parents well
   When I write a note I try to figure out everything it bears on -- what it's about, what projects it would help, what it has implications for the truth or falsity of, etc. Call that set X. I then filter that set to those things I actually care enough about to bother keeping track of them. (For instance, maybe the note has implications for love, but I don't care; if so, love is in X but not Y.)

   The difference between X and Y depends on the speed with which I can create a note, and the cost of comitting to maintaining it over time. Org-roam, fortunately, makes the first pretty low, and my own habits make the cost of the second pretty low, so often in my case X == Y.

   For each thing in Y, I then link to the new note. If that thing in Y doesn't yet exist, I make it.
** anticipate synonyms
   Synonyms prevent something of a problem. I often search for "belongings" and then remember "oh yeah, I call those possessions". The ROAM_ALIASES field helps for that.
* Don't worry about losing conscious track of any note -- losing track is, in fact, critical to successful usage of a knowledge graph.
  Even if you perfectly anticipate and curate the set Y when you create the new note, it's possible that you won't look up anything in Y for a long time. That's fine! Continuing the above example, suppose the note you wrote was about love and how to avoid burnout at work, and you put it under those two things, and then never looked at those two things. That means those two things weren't an issue for you.
* [[id:801dad54-f3a9-4b27-97f5-3e3ab3b6dbe5][I like reading and rewriting my notes.]]
* [[id:28f244af-3876-4302-8aa6-4e2306024149][Hegelian synthesis is a fun knowledge graph trick.]]
* how to read a knowledge graph
  :PROPERTIES:
  :ID:       7b2cd1a3-bac4-4057-90e3-a2698a2fdefb
  :END:
** consider a [[id:5498fb6a-fcf2-49e4-a6d0-aa30a615301d][rushing paleontologist]]
** Know when to read it. Treat them like Google.
   When you have an itch to do anything, part of scratching it should be to look in your notes for anything you've already written on it before.
** Consult the upper onotology, too.
*** the idea
    Check out notes that link to what you're reading.
*** why
    When you visited the current file -- say, "how to program in Python" -- it's likely not because doing that was your motivation per se, but rather some bigger project was, like "programming". And the latter probably links to the former. Looking "upward" will bring it into view, and thereby both remind you of your larger purpose(s) and of context and methods relevant to those purposes.
* learn to search your notes
  If the note exists, usually it's not hard to find -- even if you didn't curate its parents well, you can grep your folder for relevant terms.
