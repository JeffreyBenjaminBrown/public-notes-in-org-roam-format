:PROPERTIES:
:ID:       56673132-f636-44eb-aaa6-848b99b705a8
:ROAM_ALIASES: "string gauge-frequency correspondence"
:END:
#+title: how to guess the string gauge corresponding to a frequency
* [#A] I made *amazing* code for this.
  jeff@jbb-hp17:gauge-freq$ pwd
  /home/jeff/code/music/gauge-freq
  jeff@jbb-hp17:gauge-freq$ git remote -v
  origin  git@github.com:JeffreyBenjaminBrown/gauge-freq.git (fetch)
  origin  git@github.com:JeffreyBenjaminBrown/gauge-freq.git (push)
* PITFALL: This is ignorant.
  I did no literature review first.
  A more accurate approximation seems likely to exist.
* refs
** 12-edo notes in Hz
   :PROPERTIES:
   :ID:       ac426c9d-c1e2-4fe3-a021-620fee3d0508
   :END:
   https://pages.mtu.edu/~suits/notefreqs.html
* PITFALL: A gauge's "ideal tension" considers both timbre and feel.
  :PROPERTIES:
  :ID:       ab252872-f79a-474e-b336-b795b093079c
  :END:
  That is, pay attention to both
  when trying different frequencies for a gauge.
* which strategy to use
  If the f for which we need a g is between two fs for which we already do,
  then I like the interpolating strategy best.
  If it is out of that range,
  I might like the non-interpolating strategy better.
* the strategies
** the interpolating strategy
*** purpose
    You already know some good frequency-gauge pairs,
    and need to interpolate.
*** central idea
    Frequency * gauge seemed to stay in a somewhat narrow band.
    Call that the "frequency-gauge semi-invariant", or FGSI.
    So given two frequency-gauge pairs (f1,g1) and (f2,g2),
    and a frequency f between them (actually outside them works too),
    this finds an interpolated FGSI somewhere between f1 and f2,
    and extracts g by dividing by f.
*** the code
  -- | How far is x from low to high.
  -- proportion 3 0 5 == 0.6
  proportion x low high =
    (x - low) / (high - low)

  -- | What gauge corresponds to `f`,
  -- where f1 and g1 are a frequency and gauge near but lower than f,
  -- and f2 and g2 are a frequency and gauge near but higher than f.
  -- (Actually, f can be out of bounds too.
  -- In fact, if it's out of the sample's range, it has to be.)
  gauge f f1 g1 f2 g2 =
    let p = proportion f f1 f2
    in ( (1 - p) * f1 * g1 + p * f2 * g2 ) / f
** the non-interpolating strategy
   Given frequency f, if a string has a frequency f1 very close to f,
   interpolation can probably be eschewed,
   and I can instead assume freq * gauge is equal for both strings
   (the real one f1 with gague g1,
   and the hypothetical one f with gauge g)
   and compute:
     g = f1 * g1 / f
