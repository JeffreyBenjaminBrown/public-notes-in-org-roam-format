:PROPERTIES:
:ID:       c9b14325-eb94-4147-b366-27f81136de9e
:END:
#+title: manipulate Hode model from Emacs
* notes in isolation
** `M-x hode-insert-note`: edit or create a new note.
*** DONE Find most recent bullet.
*** DONE Capture bullet, extract URI.
*** DONE Capture text.
    From that bullet (not including it)
    to next bullet or end of file.
*** If URI null
**** then
***** Create URI.
***** Create object in graph.
**** else if text is identical to some node in the graph
     prompt asking whether to create a new note.
     If not, this note is replaced with that one.
     Otherwise, do as in the next clause.
**** else
***** Replace text in object in graph.
*** Redraw screen.
** show search results
*** `M-x hode-search`
*** type search term
*** Hode view shows search results.
** `M-x hode-save-note` changes the text of the note
   It reads the invisible UID to see what it is,
   It finds the earliest bullet on this or a preceding line,
   and goes to the next bullet or the end of the buffer.
   If the early bullet indicates the text is not in the graph, it might add a new note to the graph. But
** MAYBE green bullets should not be deletable
   nor the newline preceding them.
   Instead call a function to get rid of them,
   like `hode-delete-from-view`
   or `hode-delete-note`.
* arrows
** visit a note's targets
   to see all the targets it points as an arrow source to
** insert into a note's targets
   First do this without ordering.
** order a note's targets
   Create a lot of ternary "_ follows _ under _" relationships.
   Then insert by simply editing two of them.
*** PIFALL: Requires topo sort from Python.
    TypeDB can't topo sort yet.
** similarly in the other direction
*** visit a note's sources
*** insert into a note's sources
*** order a note's sources
* NAH [[id:dcc91291-e679-4a97-b954-11d617f4e729][automatically recolor user-drawn bullets in Emacs]]
