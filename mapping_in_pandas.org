:PROPERTIES:
:ID:       fa229129-ee84-4947-9abf-e8d117645f94
:ROAM_ALIASES: "apply in Pandas"
:END:
#+title: mapping in Pandas
* PITFALL: [[id:01bca61c-0c14-4b08-ab14-e4bb8cb384b9][Don't use the "axis = " keyword when applying to a Series.]]
* to apply a function to each row of a frame
** syntax
   hh["months to save for a month"] = hh.apply(
       lambda row: defs.months_to_save_for_a_month(
           income = row[income],
           spending = row[spending] ),
       axis = "columns" )
** PITFALL: applying to each *row* => axis = *columns*
* to apply a function that generates frames from rows to a frame
  # This isn't exactly it, but pretty close.

  if True: # compute each household member's income rank
    def sort_household_by_labor_income_then_make_index(df):
      dff = df.sort_values("income, labor", ascending = False)
      dff["rank, labor income"] = range(1, len(dff) + 1)
      return dff
    #
    ppl = ppl . groupby('household'
        ) . apply( sort_household_by_labor_income_then_make_index
        ) . drop( columns = "household"
                  # one level of the index holds the same information
        ) . reset_index(
        ) . drop( columns = "level_1" )
                  # the other part of the index is unneeded
