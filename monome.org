:PROPERTIES:
:ID:       1c6c1f7e-e33c-4342-870d-9029d389f17f
:END:
#+title: monome
* (dis)assembly
** PITFALL: Don't make the screws too tight
A very slight dimpling of the board appears to be okay.
Twist the screws only until they start to show increased resistance.
** PITFALL: The orientation of the cable in the power unit matters.
The easiest way is probably to make a note of it before disconnecting.
The surest way is to notice that there are teeth on one side of the port,
and compare their orientation to those of the teeth of the
many ports on the board.
* TODO fixing | care
https://monome.org/docs/grid/care/
** Wash pads.
  "pads can be cleaned easily by disassembling the unit and washing only the pads with soap and water. let them dry completely prior to reassembly"
** Dust with talc.
  light dusting a talc powder removes friction if the pads get stuck
*** PITFALL: Don't get talc on the circuit board or the wood.
  (monome.org actually only say to keep it off the wood,
  but once you're doing that,
  keeping it off the circuits is almost no more work.)
*** steps
**** PITFALL: This is easier if done on a big plate that I can flip.
**** Remove the buttons and the grate they poke through.
**** PITFALL: Remove the screws from the grate.
  This way it can lay flat, which it needs to do.
**** Arrange the buttons as they would be in the grid.
**** Talc the top surfaces of the buttons.
**** Lay the grate over them.
**** Mash the buttons.
  This gets talc onto the sides of the channels.
**** Wipe off any excess from the top.
**** Flip the grate and buttons over.
This is where the plate is handy;
otherwise the buttons will fall out when it's flipped.
**** Clean the bottom and sides of the grate and buttons.
This prevents getting talc on the circuit board or the wood.
** The wood oil can damage the buttons.
This is a reason not to stack wood-to-buttons,
but that doesn't apply to mine,
because they have pads on the bottom.
** Clean board with "water with a little baking soda".
*** PITFALL: I used very mostly water,
    but I think enough BS to make it cloudy when stirred.
*** PITFALL:  I used a damp but *not* wet cloth.
* installing monome code on NixOS
  :PROPERTIES:
  :ID:       e6f3d0ec-cc11-48ac-b1ff-afe338f2fdfa
  :END:
** BLOCKED asking why serialosc fails to build
*** refs
I first posted on stackoverflow, then discourse.nixos. I got my first response on discourse.nixos, but then that same one and another on SO.
https://stackoverflow.com/questions/59943707/nix-build-fails-because-python-wants-something-thats-unavailable-without-say
https://discourse.nixos.org/t/nix-build-fails-because-python-wants-something-thats-unavailable-without-saying-what-it-wants/5675/2
*** notes
**** nix-shell succeeds silently
Consider this recorded passage:
```
[jeff@jbb-dell:~/nix/jbb-config/custom-packages/serialosc]$ nix-shell https://github.com/JeffreyBenjaminBrown/nixpkgs/archive/2bbd131811991bec9ae6b296b5cd1441640c306c.tar.gz -A serialosc --pure

[nix-shell:~/nix/jbb-config/custom-packages/serialosc]$
```
It might look like nothing happened, but notice how the prompt has changed.
After running the command, I am in the nix-shell.
*** steps taken by KoviRobi
**** from bash (alternatives)
# This pulls from my nixpkgs fork on Github.
# nix-shell https://github.com/JeffreyBenjaminBrown/nixpkgs/archive/2bbd131811991bec9ae6b296b5cd1441640c306c.tar.gz -A serialosc --pure
# This uses my local copy.
nix-shell /home/jeff/nix/nixpkgs-fork -A serialosc --pure
**** from the nix shell
# ###################
mkdir /tmp/delme-serialosc
cd    /tmp/delme-serialosc
type genericBuild # prints the genericBuild recipe to screen
  # KoviRobi somehow read this to know what to do next.
${unpackPhase:-unpackPhase}
cd $sourceRoot
  # sourceRoot = ./serialosc, as stated by the output of the previous step.
${patchPhase:-patchPhase}
  # I don't see this doing anything. Did it?
${configurePhase:-configurePhase}
  # The error happens here.
type ${configurePhase:-configurePhase}
    # The waf script printed from the prior step.
    # ###########################################
    # KoviRobi suggests evaluating each of these steps in the nix-shell,
    # until getting to the python step.
    # Then run that (described next) in the Python debugger, pdb.
    runHook preConfigure;
    if ! [ -f "${wafPath:=./waf}" ]; then
        echo "copying waf to $wafPath...";
        cp /nix/store/msja67ann3qlvps7jajnx5zivyl4r715-waf-2.0.18 "$wafPath";
    fi;
    if [ -z "${dontAddPrefix:-}" ] && [ -n "$prefix" ]; then
        wafConfigureFlags="${prefixKey:---prefix=}$prefix $wafConfigureFlags";
    fi;
    if true; then
      local flagsArray=("${flagsArray[@]}" $wafConfigureFlags "${wafConfigureFlagsArray[@]}" ${configureTargets:-configure});
      echoCmd 'configure flags' "${flagsArray[@]}";
      python "$wafPath" "${flagsArray[@]}";
    fi;
    runHook postConfigure

python -m pdb "$wafPath" "${flagsArray[@]}";
  # Does this run {configurePhase:-configurePhase} until hitting an error?
  # Is wafPath the same as {configurePhase:-configurePhase}?
  # If so, how did you know that?

# from Python debugger
# ###################
continue # or cont, or just c
break /nix/store/lbrpma3528hq7gwn8ffbnwaxvsqah0bb-python-2.7.17/lib/python2.7/subprocess.py:1047
continue
up
# press Return without entering a command to repeat the previous one.
print(popenargs)
*** TODO ask in response
**** how did you find this URL?
```
nix-shell https://github.com/JeffreyBenjaminBrown/nixpkgs/archive/2bbd131811991bec9ae6b296b5cd1441640c306c.tar.gz -A serialosc --pure
```
**** where are these build phases documented?
the ones that show up after running `type genericBuild`.
**** what does this notation mean? why did you skip it?
When I run `type genericBuild`, I see this list of phases:
```
         phases="${prePhases:-} unpackPhase patchPhase ${preConfigurePhases:-}             configurePhase ${preBuildPhases:-} buildPhase checkPhase             ${preInstallPhases:-} installPhase ${preFixupPhases:-} fixupPhase installCheckPhase             ${preDistPhases:-} distPhase ${postPhases:-}";
```
In your response you list the phases, but you omit the bracketed expressions. Why? And what do they mean?
**** I don't see the patchPhase step doing anything. Did it?
```
[nix-nshell:/tmp/delme-serialosc/serialosc]$ ${patchPhase:-patchPhase}

[nix-shell:/tmp/delme-serialosc/serialosc]$
```
**** How do I replace multiple lines?

** nix-env installations are permanent
 I installed some things (libuv and libmonome) via `nix-env -f ~/nix/nixpkgs -iA <package name>`. They still work after rebuilding.
** git submodule update: model code
   ~/nix/nixpkgs/pkgs/development/compilers/chez/default.nix
