:PROPERTIES:
:ID:       52b7a722-8591-4f9b-a290-cccd1639e565
:END:
#+title: NixOS packages: create, build, install, publish
* PITFALL: These notes
  overlap, and most were written while ignorant.
* refs
  https://nixos.org/nixos/manual/index.html#sec-custom-packages
  https://nixos.org/nixpkgs/manual/#chap-quick-start
* TODO what are these for?
  nixos-rebuild switch -I nixpkgs=/home/jeff/nix/nixpkgs
  /home/jeff/nix/nixpkgs/pkgs/development/libraries/hello-test
* steps
** 1 - write the package
*** after manually downloading the source for it
    In a clone of nixpkgs:
      Put the package somewhere in pkgs/.
	Model it after nix pill 8 section 2, at
	/home/jeff/nix/pills/08/2-generic/
	NOTE: Requires manually downloading the source code.
*** with automatic downloading of the source
 rather than define src = the name of some file that I put there myself,
 define
   src = fetchurl {
     url = ...;
     sha256 = ...;
   };
 To compute sha256, download from the desired URL (but only once)
 and run sha256sum on it.
** 2 - add an appropriate line to pkgs/top-level/all-packages.nix
   e.g. hello-test = callPackage ../development/libraries/hello-test { };
** 3 - commands to build it
   :PROPERTIES:
   :ID:       c15685f2-54d8-40dd-a49c-d87ec0bd5034
   :END:
   At the root of nixpkgs, test whether it builds with
     nix-build -A <package-name>
   To add it to my user profile, run
     nix-env -f . -iA <package-name>
* writing and using Nix expressions
  https://nixos.org/nix/manual/#chap-writing-nix-expressions
** inherit x y ...
has the same effect as writinng "x = x; y = y; ...".
It's used for handing an argument unchanged from the Nix expression to the builder.
** a Nix expression calls a build script
*** PITFALL: if the builder attribute is omitted
then it uses mkDerivation, which
"does a configure; make; make install, in essence".
** build script syntax
It starts by "clearing the environment" | "using a standard environment". That corresponds to this line:
  source $stdenv/setup

It might need to augment PATH with arguments, ala
  PATH=$perl/bin:$PATH

It uses the automatically generated $out argument to determine where to build, ala
  ./configure --prefix=$out

Beyond that it's just normal bash.
** "compose" the the package
*** why this step is called composition
It consists of adding a line (or a few) to all-packages.nix.
The Nix expression has no idea what its arguments are.
This step is where they get connected.
*** see Nix manual sec. 14.3: Arguments and Variables
*** use either rec or callPackage
**** callPackage is simpler
If the arguments to use are equal to their names,use it.
See all-packages.nix (in the nixpkgs repo) for examples.
**** rec is more flexible
And interestingly, seldom used in all-packages.nix
See Nix manual section 14.3 for an example.
*** PITFALL: import statements do not extend all the way to default.nix
but rather to its superdirectory
** build and test
From the top of the newly-modified nixpkgs repo,
call
  nix-build -A pkg
where `pkg` is the new thing.

This will create a symlink called "result".
Next test the new command by running, say,
  ./result/bin/hello
* using nix-fetch-git with subumodules
  nix-prefetch-git --fetch-submodules https://github.com/monome/serialosc
* stdenv.mkDerivation:
  https://nixos.org/nixos/nix-pills/fundamentals-of-stdenv.html
