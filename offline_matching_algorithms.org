:PROPERTIES:
:ID:       d0cc8f31-a35a-4e31-878a-e1c26c7453a7
:END:
#+title: Offline matching algorithms (bioinformatics)
* What they are.
These pre-process the (long) text,
rather than the (short) pattern(s) matched against it.
They are appropriate when the text is fixed --
e.g. the human reference genome --
and many patterns will be matched against it.
Such algorithms are called "offline".
Others are "online".
* Index every [[id:1f088605-2a3e-42d0-a856-da9810ded198][kmer]],
mapping it to a list of offsets where it starts.
** Given a kmer index, can look up any kmer from P in it,
and then do "verification" to see if the rest of P also matches at any of the "index hits" produced by the initial lookup.
* hash table indexes
From each (kmer,offset) pair,
apply the hash function to the kmer to find a "bucket" (list of such pairs),
then append (or prepend; doesn't matter) the pair to that bucket.
** Collisions are possible.
That is, two different kmers can map to the same bucket.
If there aren't a lot of collisions, they won't affect speed much.
** [[id:c5146fa1-d833-4018-9b5b-4506044a3a09][Python dictionaries are hash tables.]]
* Variations on kmer indexing
** Index only every nth kmer of the text.
This makes the index shorter,
but it means in each pattern P we have to try kmers starting at every possible position modulo k. For instance, if we index every other kmer in the text,
then we have to try (any) kmer from P that starts at an even offset, and another that starts at n odd one.
** Index length-k subsequences that aren't substrings.
To match a pattern P we just take any subsequence of the same shape in P.
If k didn't change, this does not change the size of the index,
but it can increase the specificity of a hit --
the likelihood that it leads to a match.
** It's an active area of research.
Popular, fancier variations include the suffix tree,
the suffix array, and "FM index".
