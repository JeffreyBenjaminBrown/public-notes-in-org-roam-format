:PROPERTIES:
:ID:       9c2231f1-1b74-44ba-8025-f0683412ff5e
:ROAM_ALIASES: "debugging in Python" "Python debugging" "pdb"
:END:
#+title: pdb, the Python debugger
https://docs.python.org/3/library/pdb.html
* SOLUTION: for mutli-line input
  from IPython import embed; embed()
* set a breakpoint with pdb.set_trace()
* commands within pdb
** execution
   Ordered by size:
   The first of these advances the least.
*** s(tep): next or down
    "Traverse" the current line.
    Stop at the first possible occasion:
      either in a function that is called,
      or on the next line in the current function.
*** n(ext): next skipping any down
    Continue execution until either
      the next line in the current function is reached,
      or the current function returns.
*** r(eturn): up
    Continue execution until the current function returns.
*** c(ont(inue)
    Continue execution,
    only stop when a breakpoint is encountered.
** inspection
*** l(ist) [first[, last]]: show code
    List source code for the current file.
**** With . as argument
     list 11 lines around the current line.
**** Without arguments
     list 11 lines around the current line or continue the previous listing.
*** a(rgs)
    Print the argument list of the current function.
*** p <expr> : evaluate
    Evaluate the expression in the current context and print its value.
*** pp: like p, but pretty-print
*** whatis expression
    Print the type of the expression.
** interact: start an interpreter
   Start an interactive interpreter (using the code module) whose global namespace contains all the (global and local) names found in the current scope.
** (q)uit
