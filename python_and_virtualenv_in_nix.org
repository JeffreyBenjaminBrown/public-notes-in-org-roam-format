:PROPERTIES:
:ID:       a44ce4eb-ff38-4ee3-8e72-50f9902ff754
:END:
#+title: Python and virtualenv in Nix
https://nixos.wiki/wiki/Python
* my favorite way to use Python in NixOS: use both nix and virtualenv
** why it's my favorite way
   Going fully Nix went badly for me,
   because some packages were not yet defined in python310Packages.

   And going fully virtualenv is known to fail sometimes,
   because it can somehow need things it doesn't have access to --
   even, I guess, if they're part of the active top-level NixOS config.
** how
   serial
*** maybe write `pip-shell.nix`
**** purpose
     It defines things -- Python libraries and other packages --
     that will be imported from NixOS
     (and they need not part of my NixOS config!),
     rather than installed locally via virtualenv.
**** an example
 { pkgs ? import <nixpkgs> {} }:
 (pkgs.buildFHSUserEnv {
   name = "pipzone";
   targetPkgs = pkgs: (with pkgs; [
     glibc
     python310
     python310Packages.pip
     python310Packages.numpy
     python310Packages.pandas
     virtualenv
     zlib
     zlib.dev
   ]);
   runScript = "bash";
 }).env
*** write `requirements.txt`
**** This defines anything to be installed via virtualenv.
     If installing it via virtualenv doesn't work,
     try putting it instead in `pip-shell.nix`.
**** This needn't be in the top folder of the project.
     E.g. a nicer place for it is the `python/` subfolder.
*** use the environment(s)
    # If I wrote a `pip-shell.nix` file, use it to create a Nix shell.
    nix-shell pip-shell.nix

    # The rest of this is just like it would be without `nix-shell`.

    # Build the environment. Only needed once.
    python -m venv .venv

    PS1="[nix @ \W ] "          # Shorten the prompt
    source .venv/bin/activate
    pip3 install -r requirements.txt
    .... <play with it> ...
    deactivate
