:PROPERTIES:
:ID:       1d0f193f-10f0-4c2c-9cf5-d0e9a1fc49d7
:ROAM_ALIASES: Python
:END:
#+title: Python (programming language)
* TODO study this article on using Python as if it were Rust
  https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html
* TODO use [[id:911bfaf0-5d29-40ab-8855-02b1c8f5f4f6][Pyright]]
* TODO use [[id:e2790daf-d86a-4b1b-994b-792d2ac3b3a6][Hypothesis (python library for property testing)]]
* [[id:c2a0f1ef-2a86-4704-84cf-0c974edd237a][PITFALLs in Python]]
* [[id:8bcdca01-a78f-4ee1-9873-51ef24fc5f0a][imports and modules in Python]]
* the tools
** [[id:9c2231f1-1b74-44ba-8025-f0683412ff5e][pdb: the Python debugger]]
** to tag(build a tags file) python code for use in emacs
   :PROPERTIES:
   :ID:       7dc33cd5-40bc-421a-aa1d-a40cf0635119
   :END:
*** normal
#+BEGIN_src shell
  find . -type f -name '*.py' | xargs etags
#+END_SRC
*** COMMENT fancier
#+BEGIN_SRC shell
  find . -type f -name '*.py' | xargs etags_plus
#+END_SRC
** [[id:74d6d7d1-7749-4d60-925d-43958fcd3ee3][testing in Python]]
** [[id:780aefb0-ad8f-411b-b716-3e9c3e98cdf8][profiling in Python]]
** [[id:b8890c90-7e53-4482-8b3f-1399a28fe92a][virtualenv (Python tool)]]
*** [[id:a44ce4eb-ff38-4ee3-8e72-50f9902ff754][Python and virtualenv in Nix]]
* the language
** comprehensions in Python
*** [[id:fdd9c67e-63c9-4372-b742-4396a83c8a60][dictionary comprehensions in Python]]
*** [[id:0de92cee-f908-4393-9f87-4cfb675a3bec][local variable definitions in comprehensions \\ Python]]
*** [[id:ea372c17-b199-485d-9406-50976b89f6e6][flatten a list using a comprehension in Python]]
** [[id:a6cb3f8e-a4af-4e9c-bb05-42f4f5a2f7f2][exceptions in Python]]
** [[id:b702aa8d-ec68-46c1-9f27-c695a96e1c2d][generics in Python]]
   tags abstract type variable
** [[id:5fe079b2-583f-45da-8e17-fc0879c4a8dc][introspection in Python]]
** lists in Python
*** [[id:ea372c17-b199-485d-9406-50976b89f6e6][flatten a list using a comprehension in Python]]
    tag nested lists
** [[id:5ae0535d-5f21-4a09-8485-0eda8eb4b73a][Python dictionaries ("dicts")]]
*** [[id:88971f77-9463-446d-a07b-9ff1d0f601df][merging Python dictionaries]]
** [[id:f54893f9-b912-4a71-953d-4f1ed18d0618][closures in Python]]
** [[id:238e57b1-cb92-481c-8786-7131962b6689][enum types in Python]]
** [[id:526b3876-94eb-42dd-a618-bd817311bbd8][pure types in Python]]
   tag dataclasses
*** [[id:0ec89580-3ce0-4175-a050-f2ecd9089b0d][sum types in Python]]
*** [[id:cad21fc2-6880-48a4-bc98-bd5748a52d4b][product types in Python]]
** [[id:99890a4d-1147-42ef-b017-6cf378e4b316][operator precedence]] in Python
** some obscure Python syntax
*** lists can be "multiplied"
    [1]*3 = [1,1,1]
* efficiency of primitive operations in Python
  https://wiki.python.org/moin/TimeComplexity
** List indexing is O(1).
* some Python libraries
** [[id:1a97cb6c-b6ff-4439-9790-ff372bc1ee38][scipy (libraries for Python)]]
** [[id:63357c91-0460-4fdb-b85e-e24782c581d0][json (Python library)]]
** [[id:4f41726e-6865-4329-91c2-9f8716a5ba06][filelock (Python library)]]
** [[id:23e33a81-1b9b-4914-822a-c09e033d045a][csvlib (Python library)]]
** [[id:e2790daf-d86a-4b1b-994b-792d2ac3b3a6][Hypothesis (python library for property testing)]]
** [[id:f3edced7-7558-4894-86f5-6859faf0078a][PyPika : SQL query builder for Python]]
* solutions
** [[id:b73f1363-5dfa-43a8-9899-77ca2870924f][either and maybe in Python]]
** [[id:5329f542-d070-4f8d-bdb4-a3361147be5b][how to convert an iPython notebook file to plain python]]
** [[id:0d4d789c-2c9b-4da1-8637-bb6b6389fac7][unduplicate (find unique members in) a set of sets or lists]]
** [[id:c311d1f7-0a9d-42c0-a4db-ba6305051902][parse a URL query string in Python]]
** [[id:c804ea2a-2cf3-4a5e-8f43-c504e398fbdf][type aliases in Python]] | type synonyms in Python
** for scope problems, see [[id:f54893f9-b912-4a71-953d-4f1ed18d0618][closures in Python]]
** [[id:ea2298c9-6f5e-49f7-b81b-1374b6764e08][concurrency in Python]]
** [[id:e98d0657-b40e-4c06-b8a5-a5a441344eb7][econometrics in Python]]
** [[id:31aeb236-5ce9-46bc-ba6e-bbe6b5c65e6e][reconciling different versions of Python]]
** [[id:cec794c0-a02f-467d-bda9-d1065ccfaa0d][reading command-line arguments to Python programs]]
** [[id:bd7363b0-401a-498e-9fe3-5d291c955cb3][if (command history|paste|backspace) misbehaves in `conda python3` in Docker]]
** filesystem paths in Python
*** [[id:c6f64f15-e8f7-4fc9-b099-04b7276bd82b][strip the file extension from a path \ Python]]
** [[id:efa6659f-b52a-49ec-af95-503e6428a06d][write to a file in Python]]
** [[id:5fc6d2b8-df62-4329-9dd1-54653dd0b76d][debug a call to subprocess.run \ Python]]
** to run a file from the REPL
   exec ( open ( "./filename" ) . read () )
* [[id:e4a6a10f-a305-49fa-91b1-08482df14229][the CS skills assessment I wrote, with a moderate focus on Python]]
* NAH [[id:9efac453-223b-47c4-8d31-0e5d7702feb9][install python 3.12 in Ubuntu (in 2023, with default repos at 3.9)]]
