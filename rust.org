:PROPERTIES:
:ID:       6c76685a-da5b-49e5-b3cd-fc7c552b6ca1
:ROAM_ALIASES: "cargo (Rust tool)" "rust (programming language)"
:END:
#+title: Rust (programming language)
* u
** solved: [[id:b91d42ba-f87b-4bad-960b-2e1d467bee26][cargo and apt stopped working in Docker, could not connect]]
* [[id:88f580b2-b7a3-478d-9894-dbafebd2fc9e][TypeDB via Rust]]
* initialize a project
** shell.nix
*** PITFALL: Docker is easier
**** elaboration
     and some of my code is already
     made to work in this image:
     jeffreybbrown/hode:2025-03-13.rust-no-python
**** why
     Tantivy, for instance, I could not use in NixOS.
*** how
{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell {
  buildInputs = with pkgs; [
    # Rust development
    rustc
    cargo
    rustfmt
    clippy

    # Required for Tantivy
    pkg-config
    openssl
    openssl.dev
  ];

  # Environment variables
  shellHook = ''
    export RUST_BACKTRACE=1
    export PKG_CONFIG_PATH="${pkgs.openssl.dev}/lib/pkgconfig:$PKG_CONFIG_PATH"
  '';
}
** cargo init --bin .
** edit cargo.toml
[dependencies]
tantivy = "0.22"
** cargo build
** cargo run
* to build or run something other than main
  cargo {run, build} --bin executable-name
  where executable-name is defined in a bin passage,
  for instance
#+BEGIN_SRC toml
[[bin]] # more bin sections can be added
name = "not-main"
path = "not-main.rs"
#+END_SRC
* Prefix an argument that is not modified with &.
  This means the function is passed a reference,
  which is efficient,
  and is not allowed to modify it,
  which is safe.
  Also, the caller can continue to use the argument,
  whereas without the & it would be unable to.
