:PROPERTIES:
:ID:       9c5619e5-81ad-4a67-9705-e4761bdd6839
:ROAM_ALIASES: "skg"
:END:
#+title: shareable knowledge gardens
= an app to build
* Claim: Shared note-taking is not yet feasible.
* Claim: Communicating graph diffs is helpful.
  and this would do it automatically
* [[id:1f76cbed-d2c5-4522-89e2-1de946d5dc99][knowledge graphs, some connectivity demos for]]
* TODO Not every headline should be searchable.
  By default they should be,
  but the user should be able to turn that off.
* TODO The merge of two nodes should have both IDs.
  This preserves backlink and subscription integrity.
* TODO make export to org-roam easy too
  not just import from
* TODO a path to program it
   serial
** DONE hand-code a title search engine
   Tantivy, an excellent Rust library for that,
   gave me problems.
*** Deal with links in titles.
** DONE the simplest data model
   Just flat org files.
   Won't even need to start with all fields --
   with titles and contents, testing should work.
** ONGOING Import and index some org data.
*** Is it reasonable to have Tantivy and TypeDB index?
    Tantivy is good for text search.
    Maybe TypeDB could hold that data too, but meh.
*** DONE Should Tantivy index IDs, too?
    I will need some index from IDs to path.
    Might as well be TypeDB.
*** TypeDB will track the rest of the data.
    type :: Mandatory [ basenode, <more later> ]
    id :: ID # mandatory
    context :: ID # optional
    comments on context :: Optional (of Unit type)
    path :: Path # mandatory
    contains :: <Relation>
    subscribes to :: <Relation>
*** ? Integrate :: Tantivy index , ?complete SKG format.
*** a TypeDB index
    see [[id:3b95b70c-8d77-45e3-8a75-1fcc80dd0b06][format]]
*** Don't search a repo's .git folder.
** fetch a node (in its context) from Emacs
   Send the ID from Emacs.
   Build the buffer in Rust --
   a tree of headlines, with colors and hidden text.
   Show it in Emacs.
** search for a title from Emacs
   Build a document of search results in Rust.
   Titles are visible, IDs are not.
   The user can visit any of them.
** edit a node from Emacs
*** idea
    Its hidden properties include ID and source file.
    Editing it in Emacs changes its color to "changed, not saved".
    Some command permits one to save all "changed, not saved" nodes in the context.
*** make "flat-visiting" an edited file possible
    If a parent loses children,
    that's different from editing its title.
    But using the same indicator for both is fine,
    if the user can visit the edited file
    to see what changed.
    Show the file in read-only mode,
    hiding its IDs just like in its context.
    This makes the two easy to compare.
** implement multiple repositories
   Put a config file in the root folder.
   Each repo is given a path relative to the root,
   a color-background pair for its data
   (which the user can use to make private data obvious),
   and a name for who wrote it.
   Red on green is reserved for system-provided text.
** implement comment files
   Private and public comment files are equivalent.
   The only difference is that data from private repos
   can be in a different color.
   Each repo is color-configurable.
   Comments on a file are shown as its grandchildren,
   under a mediating child called "& by [author]".
** implement [[id:35e8d4f2-db4e-4dea-a005-7d33dfdc6e9b][subscription]]
** implement [[id:c03da915-2187-43a4-ace1-8d93438c967f][cloning]]
** implement backward view
   "show links|references to this node",
   including subscriptions, unsubscriptions.
   Make displaying link source repo optional.
* architectural principles
** Avoid use complex data structures in Emacs.
   Emacs seems best for buffer text.
   That text's properties can encode anything I need.
   All other logic, including types, should be in Rust.
* features and usage
** skg format
   :PROPERTIES:
   :ID:       3b95b70c-8d77-45e3-8a75-1fcc80dd0b06
   :END:
*** "hypertext" = text that can contain links
*** "flat org with subscriptions and private commentary"
    :PROPERTIES:
    :ID:       08d6887d-8a86-4906-8ab3-6d93217de0fd
    :END:
**** about the name
     It's like org files, but each tree is represented as a collection of flat (only top-level headlines) org files.
**** definition : fields
***** format (is one of the fields)
      In case I want to add more later.
      Can be an integer referring to an enum file.
***** Org-style text.
***** Optional ID for its context.
      Each file either is a top-level context,
      or refers to one.
***** Optional indicator for if the file comments on its context.
****** if node N comments on its context node, then N is shown as a second or later generation of the context
       Perhaps as a grandchild,
       mediated by the child "& private"
       (for private comments) or else
       "commentary by [author]".
****** why
       M is probably in a different repo --
       either [this one is private and yours, and that one is public and yours],
       or that one is not owned by who owns N.
***** A list of nodes with IDs and hypertext.
      This makes fine-grained unsubscription feasible.
***** [[id:9f6101cc-2eca-4f96-aea7-6f341034e592][subscription data]]
**** subscription data
     :PROPERTIES:
     :ID:       9f6101cc-2eca-4f96-aea7-6f341034e592
     :END:
***** Subscribed-to foreign nodes for every node.
***** globally unsubscribed nodes
      "Never show me those nodes, in any context."
***** locally unsubscribed nodes
      If N subscribes to S, and S contains T,
      N can unsubscribe from T *as content of* S.
      This is useful if T is subscribed to elsewhere.
      In particular, if you see something of someone's that you like, but you want to put it somewhere else, this is how you do that.
**** Use json to make it easily extensible to including org-style properties like aliases.
**** feasible extensions
     :PROPERTIES:
     :ID:       81d2fea0-f1b1-48a8-9934-5f09f5a5a3a0
     :END:
***** "default link text" field
****** => default public name for links to a private note
***** "search aliases" field
***** lists, sets and relations.
     If I want to later add lists, for instance,
     the flat org files will be able to contain those,
     and vice versa.
     And it's easy to modify the search function --
     by default it searches for
     terms in titles and lists together,
     but the user can narrow it to, e.g., just titles.
**** obvious: fields
***** f for format
****** an integer referring to an extensible* enum file
       extensible by those building the program
***** cx for context, an optional ID
***** tx for title, a string
***** cn for content, an optional list
      Optional because the text might be its own file
      just for the sake of having an ID to link to.
***** id for id, a string with requirements
***** anything else goes but won't be read at MVP launch
*** private commentary files refer to public files
**** Initially, just make them lists.
     Show all the private commentary as a child
     "& private" of the commented-on node.
     They should have more fields --
     at least unsubscriptions.
**** later make them [[id:38d2c92e-3ba0-46ca-bf32-756d59bea448][diffs]]
** subscription
   :PROPERTIES:
   :ID:       35e8d4f2-db4e-4dea-a005-7d33dfdc6e9b
   :END:
*** if somone changes a title, be able to include that alternate title as another title
*** [[id:9f6101cc-2eca-4f96-aea7-6f341034e592][data model]]
*** display
    Subscriptions in a file are shown as its grandchildren,
    each reading "[note] by [author]",
    under a mediating child that reads "subscriptions".
*** [[id:79db50b5-4bfc-497c-8e19-10fc7f6e4ffd][Subscribed content is filtered.]]
** cloning
   :PROPERTIES:
   :ID:       c03da915-2187-43a4-ace1-8d93438c967f
   :END:
*** how
    If you like a branch of someone's thoughts,
    clone the whole thing.
    Each file in the clone is automatically subscribed
    to the file it was cloned from
    (each of which can be undone,
    in the same fine-grained way as manual subscriptions).
*** why
    They might delete it,
    so a reference to their work could break.
*** use a different ID
    This way the clonee can follow the cloner's work,
    and vice-versa.
** search over title, author
** data import
*** org-roam import seems one-way
    I don't believe anything I express in org-roam cannot be expressed in it.
*** smsn interchange could be two-way
    There is a natural map in both directions.
    Only from smsn into SKG would be 1-to-1 (lossless).
** how to represent subscriptions
   Subscription is like merging.
   Making every node have an ID makes this easier.
   Indicate for each node what foreign nodes it is subscribed to.
   Indicate for each context what foreign nodes it has been unsubscribed from, and which have been incorporated into it. Unsubscribed-from nodes are never shown. Incorporated nodes are omitted from the view of foreign data because they now appear somewhere the user considers more appropriate.
** how to show (and filter) foreign data
   :PROPERTIES:
   :ID:       79db50b5-4bfc-497c-8e19-10fc7f6e4ffd
   :END:
   Don't show foreign-made changes to foreign data. Too hard.
   Instead just show their data as it stands, given your subscriptions and incorporations.
   For any domestic node with subscriptions, show a "subscribed to" child. Its children are foreign files, and its grandchildren are their "filtered content". The filtered content exclude any nodes to which any other node in that context subscribes (because they should be shown there instead), and omits any unsubscribed-from nodes.
   Incorporation, merging and subscription are all so far words for the same thing.
** later ? [[id:41844d8a-f352-4e2d-8ba3-3c83b2dd2ac3][backlinks view]]
* non-obvious implied features
** Sharing and version control are independent.
   :PROPERTIES:
   :ID:       8faa302a-2a07-4cc9-8741-86a4e6b69f78
   :END:
   No need to look at diffs to think about sharing.
** Children stored separately from position.
** Subscriptions can be public and private.
** Unsubscriptions could I think be public and private.
   The trick: In a public context the privately unsubscribed-from nodes should not show up.
** Public subscriptions to private nodes reveal almost nothing.
   They reveal the fact of their existence,
   but not what they unsubscribe to -- not even its repo.
* do later
** [[id:c679b07c-3bc5-46c4-aa76-bbdc0dd10464][fix backlinnks when merging]]
** [[id:99ae154c-5dfc-4a95-9bdf-af09159c6da4][merges have subscription consequences]]
** nested links -- links in titles
*** the idea
    This is like creating a single-use relation type.
    Just like relatinoships with permanent types,
    this is useful because it automatically creates links
    to the items referenced in the title,
    rather than requiring the user to do that.
*** a representation: wrap all links in brackets
    :PROPERTIES:
    :ID:       91606c6f-0b09-4cb1-b4fe-81ca72a3f6ce
    :END:
**** example
***** for          titles with links
      [humility] engenders [peace]
***** for links to titles with links
      [[humility] engenders [peace]]
**** problem: It might be confusing that brackets are also used to indicate member types in [[id:cfa775eb-9107-430a-a32c-228901d0f494][relation type definitions]].
*** search over titles that include links
    Order results by title length,
    and if the title includes links,
    show them, rather than showing the whole title as one link.
** smart diff traversal
   treating nodes as first class entities,
   able to jump easily from any [change involving a node] to any of its brethren in an equivalence class, where equivalence is modulo insertion or deletion, modulo link text and any other links present in the same node, and modulo appearance as base content, subscription or unsubscription.
** smart diff view
   Transclude to see all insertions and deletions in a context.
** [[id:81d2fea0-f1b1-48a8-9934-5f09f5a5a3a0][extend the file format]]
** report references to a user's data
   The app should make it easy to see where
   a foreign repo refers to yours.
** Permit people to share their subscriptions with each other.
** A public notes repo should be configurable to contain only one commit.
   If so, it is the latest of a corresponding private repo.
** "flat org diff" : for private lenses onto public [[id:08d6887d-8a86-4906-8ab3-6d93217de0fd][flat-org]] files
   :PROPERTIES:
   :ID:       38d2c92e-3ba0-46ca-bf32-756d59bea448
   :END:
   Each FOD file corresponds to an FO file.
   Each line of an FOD can have an "elder brother" ID, its own ID, and hypertext content.
   If the first line of an FOD has no elder brother ID, it is listed before all the FO's content in the merged FOD-FO view.
   If any other line of an FOD has no elder brother ID, it is listed right after the preceding element of the FOD in the merged view.
   Any FOD line with an FO elder brother is listed right after the elder brother in the merged view.
** [[id:41844d8a-f352-4e2d-8ba3-3c83b2dd2ac3][oscillable generations view]]
** transclusion
** show foreign moves of incorporated=merged=subscribed-to nodes
   If they moved something but you merged it with something of your own, maybe don't show the move, because you already placed it and you're already tracking it.
** relationships and types thereof
*** relationship type
**** fields
***** address
***** definition
      :PROPERTIES:
      :ID:       cfa775eb-9107-430a-a32c-228901d0f494
      :END:
      "[agent] knows [agent]", "_ needs _", etc.
****** Can be typed or not.
****** This should probably define the default name
       but the relation can have aliases.
***** other data, like an orgish file
**** problem: It might be confusing that brackets are also [[id:91606c6f-0b09-4cb1-b4fe-81ca72a3f6ce][used to indicate links]].
*** relationship
**** fields
     address
     relations type address
     members
**** problem: permits invalid type
     The relation type must correspond to the number of members.
**** justification
     If you create a relationship involving x and y,
     it automatically becomes visible from x and y,
     rather than requiring the user to visit them and link to it.
     (The user could still explicitly place it in either view,
     and maybe give different or additional link text.)
* fun to explain
** Each note is a collection of notes.
** Containment and linking are different.
   A context is a note contained in no other note.
   But a context, like any other note, can be linked to.
** public privacy and private privacy
   The user can insert a link to a private file anywhere, and the link might be public or not. When not, it is instead part of a corresponding file in their private repository, which refers to the public repository context that it modifies.
* earlier work
** subscription model, I think needlessly complex
   You can subscribe any node in your graph to any node(s) in another's. Upon doing so you can then decide how to merge them, associating context-descendents in your context with ones in context(s) of theirs, and unsubscribing to branches not of interest (in your context).
   Unsubscriptions can be invisible or visible: "remove all content descending from here, and make here invisible" or just the first of those two things. It should be visibly obvious that visible unsubscribed nodes are unsubscribed.
   The user can attach their own context to a subscription. (This generalizes how a link can appear with non-link text in the same expression.) They could attach it in-line as text visibly not imported from the subscription, or (obviously) as descendent graph content if there's enough to warrant (in the user's eyes) structuring.
** spec
*** representation
**** IDs must proliferate, relative to org-roam.
     I don't see how to proliferate IDs if diffs are to be readable.
     Every element of a list involved in any other relationship
     (which includes having plain non-link text view-children)
     must have an ID, so that it can be moved.
**** Anything with a title can have an optional alias field.
*** views
**** kinds of data visible from a topic
***** The available curated views of it.
      These ought to be mergeable.
      For instance,
      if the private file on a has child b with grandchild c,
      and the public file on a has child b with grandchild c',
      the merge would contain a single child b with grandchildren c and c'.
***** The relationships it is in.
****** Speecial kind: Links to it.
***** Parts of the git diff involving it.
**** That relationships exist involving N not recorded in N can be seen from N.
***** wordier definition
      If node N is in relationship R,
      R might be part of N's contents (recursively), or not.
      If not, the fact that things like R exist
      should be visible from a view of N.
***** Indeed N need contain no curated content at all.
      In this case the only information visible from it
      are the relationships involving it.
**** The view of a recursive note must transclude.
**** Lists and sets can be shown on one line or across multiple.
