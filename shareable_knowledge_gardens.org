:PROPERTIES:
:ID:       9c5619e5-81ad-4a67-9705-e4761bdd6839
:ROAM_ALIASES: skg
:END:
#+title: shareable knowledge gardens (skg)
= an app in progress
* ONGOING processing this file
  PITFALL: For processing this file,
  the following external files have higher priority,
  because [[id:1df9170f-7044-488f-bf66-5a2c38f309d3][I recently processed this file]].
** [[id:9e45ccd9-d6e0-4870-8f13-cc11135334d0][how to use a knowledge graph]]
*** if another in the see-also contains this one, maybe can omit it
    or let it be seen through the containing link
** [[id:d5a5a3ff-977a-405b-8660-264fb4e974a3][Hode]]
** [[id:41844d8a-f352-4e2d-8ba3-3c83b2dd2ac3][osc-gen]]
** DONE FOR NOW : reviewed <2025-08-30 Sat>
*** [[id:37f7be50-9b2c-4426-b288-e83225b6d5d8][expressivity voids , observed linguistic]]
*** [[id:9c5619e5-81ad-4a67-9705-e4761bdd6839::+title: shareable knowledge gardens (skg)][this file itself]]
    :PROPERTIES:
    :ID:       1df9170f-7044-488f-bf66-5a2c38f309d3
    :END:
* [[id:f3644edd-b358-4053-a906-b4306dd52244][maybe rush to integration]]
* [[id:52d94126-fcee-4cf7-86f5-1c205b928d55][presenting data]]
* Some nodes do not want to pollute what they link to
  by being in the backlinks view.
* refs
** mine for others
*** The readme on Github is clearer than these notes.
    https://github.com/JeffreyBenjaminBrown/skg
    and might be the best introduction to Skg.
*** [[id:1f76cbed-d2c5-4522-89e2-1de946d5dc99][connectivity demos]] for knowledge graphs
** social context
*** comparing skg to academia
    :PROPERTIES:
    :ID:       0425cc36-0ce3-4fe9-8cb8-6456db3d0897
    :END:
**** Mindmapping is opposite to academia.
     It is thinking without specialization, with complete freedom.
**** Mindmapping can look distant from work.
     Thinking about a lot of things you can't change can look impractical. The change is in you.
* unsorted
** untapped meaning in my org notes
*** idea
   In a 3-node chain of descents, which is the middle word?
   When viewing an intermediating term from its own perspective,
   have a distinct branch called "intermediations".
   Each intermediation has two children:
   ```
     * intermediator
       [syntax $of the intermediator]
     ** [a role from that syntax]
     ** [the other role from that syntax]
   ```
   and the descendency order exists at least descending from a.
   If it exists descending from b as well,
   a herald should indicate that.
*** problem
*** asymmetry
    Perhaps no single relation is sufficient,
    because the relation used from b's perspective relating it to a
    is not the one used from a to relate it to b.
*** intermediator not always intermediating
    What if a member exists between the three,
    where the intermediator is not between the other two,
    but rather one of the other two?
** What could I charge for that only businesses would care about?
** explaining it to others
*** Skg is for knowledge. It lets you collect, organize, navigate (read), share and integrate knowledge across people. It expects user to colect knowledge; without that it is no use.
** [[id:db33e272-2aa4-4394-87a9-f7d42ffa78bf][link content filters \ skg]]
** better save
*** Pass awkward contents upward.
    Children where they shouldn't belong should be handed to a node more containerward.
    e.g. children of an alias.
    rather than being ignored
** [[id:2e231498-7191-45de-84b5-5790f331af5c][blocks  for reader (relationship)]]
** ~ should be 'is fundamentallu related to'
*** could use ~~ for less so
*** Any instance of either could be refined using more characters later.
** Will need "show all relationships".
*** ~}, ~aliases, ..
    prefixed heralds with (~) for 'non-content relationship' midparent.
    where ~x means 'in relation x to parent'
** Have you been collecting data for a future explosion*?
   explosive integration experioence?
** Backlinks should be absorbable into content
*** why
    Backlinks are relationships as yet
    unclassified from the target's perspective.
*** how
    whereupon they show up no longer as backlinks,
    or at least all that have been absorbed into content
    show in the backlinks in a folded branch called that.
** user obligations and suggestions
*** Review your collections.
*** Collect thoughts.
*** Make at least three links to anything you hope to keep.
*** Horizontal and vertical relationships need not be reciprocal.
** shine-through at a link
*** definition
**** precise definition -- at least of a special case
     :PROPERTIES:
     :ID:       dfa3372a-3dea-4c26-8a12-31ffba86ab3c
     :END:
     when a tree has
       a node S (for source)
         that has (maybe among other links)
         a link L to node T (for target)
           (T maybe needing to be part of a different tree),
     and S contains S'
     and T contains T'
       such that S' links to T'
**** vague definition
***** example: a link to [[id:538d409f-9808-40ac-ae3b-1c34f5613c01][fantasy]] under which something from fantasy shines through
***** it is the "_ from _  visible from _ through _"
*** motivation
**** it's nice to write
     If S is not a containment root,
     the reason S links to T can often be clarified
     by including a link recursively contained in S
     to something recursively contained in T.
     (There might be other reasons to do it, too.)
**** it's hard to read from T or T'
     and this would be really nice,
     because S' is saying something about T or T'.
**** it's hard to read from S', though perhaps not dire.
     Currently nothing indicates the
     [[id:dfa3372a-3dea-4c26-8a12-31ffba86ab3c][relationship between S and S']].
*** to decide
**** Can S or T have multiple links?
**** Can there be more distance between S and S'?
**** Can there be more distance between T and T'?
*** TODO needs heralding
    herald at [[id:dfa3372a-3dea-4c26-8a12-31ffba86ab3c][the linking node S']],
    indicating the relationship between
      (its immediate container? some containment predecessor?)
      and its link target
* motivation and soul-searching for skg
** [[id:320e5181-cf0d-48bf-b024-d0e6c4c309c2][Do I fear personal integration?]]
** Do I fear human superintelligence?
   :PROPERTIES:
   :ID:       ec4fab64-a155-47d4-80a5-46959c987934
   :END:
** Are personalized views dangerous?
   Isolating?
   Enabling of epistemological disconnect?
   What if everyone can write their lens onto Wikipedia?
** I want help, guidance navigating deep ideas from others.
   :PROPERTIES:
   :ID:       3f518215-aa9f-4bc0-9fb2-b21dcc25909a
   :END:
   We waste so much information. So many have found the answer to what ails you, maybe always. We could choose our deepest guides, people claiming or linking to ideas, on a per-topic basis.
** [[id:d7c3b236-06f8-48e4-8c42-39313737aa65][What would Godel say?]]
** technical motivations
*** {Org} files are too far apart.
    Transitions between files are too stark.
    A person should choose the structure of how their attention forks,
    easily maintain two contexts in view at once.
*** if recording a relationship did not necessarily warp the view
    In a tree, it must.
**** example : It's hard to include "human" in my tree.
     I really want it to be a tag that doesn't interfere with the tree.
** [[id:edb446e2-fdf0-4917-ae6c-e4afd912499e][Am I being realistic?]]
* technical
** PITFALL | REMEMBER : Avoid complex data structures in Emacs.
   Emacs seems best for buffer text.
   That text's properties can encode anything I need.
   All other logic, including types, should be in Rust.
    These allow one website to comment on another,
    such that subscribed readers
    can see those annotations from their target.
** ?
*** "Read the last branch last {it's the point, these are about it}."
    The most natural way to structure this would be
    the node saying that is talking about its children,
    not its brothers.
    That most ensures the reader reads it completely
    before processing the others.
    In this sense there might be nothing unnatural
    about a (sub)tree of many singleton branches.
*** formalize the translation from emacs to graph operations
    Haskellers might want to help.
*** cyclic subscriptions
    They do not seem problematic!
*** What would help me feel less dumb with my notes?
**** a [[id:59e54472-f770-437d-bc36-323928dd3352][linked to in container]] herald
*** Help [[id:e114b8ed-e85c-41f3-b972-45b23ab5b8d5][the writer guide the reader]].
*** [[id:051dc64d-f930-4959-82e6-3372ef9bdec5][history of graph operations]]
*** user-defined relation*s
    * = relation in the TypeDB sense, a template for relationships
**** Label the relationship differently from a different member.
***** be able to
      probably often the single label best serves all members
**** isntances
***** [[id:e81824c5-81bc-4a91-8221-0042c24cf2e1][Illumination is a knowledge graph property.]]
*** Expose TypeDB querying to the user.
**** checking compatibility with the (Emacs-Rust) API
***** How the user represents a query is independent of the API.
***** How the query results are shown
      They can be placed anywhere.
      A herald reveals the headline as collecting a query.
      A child marked query-text has a body equal to the query.
      The results are the other branches.
***** How the query results are saved
      They aren't. But as usual, if a query result is edited
      (in its text or content) that can be saved normally.
      They initially appear with the [[id:324f020b-1145-4279-a87a-02c96dce7a30][omits-some-content herald]].
*** kinds of queries
*** show|hide {intermediating relationships = relationship labels)
*** [[id:37f7be50-9b2c-4426-b288-e83225b6d5d8][expressivity]]
**** [[id:c2a174fd-9d12-4764-92e8-c9cbfa46f12e][bracket grammar]]
*** blurring the nlp-graph distinction
**** [[id:cadd9321-1784-4d73-96a2-326d30329c38][labeled relationships in skg]]
**** it vs. that
***** in a nutshell
      "It" refers to the container of the (containerward-)nearest container that used the word "that", or else the farthest container if none have said "that" (some others may have said "it").
***** more verbose
****** "that" can be used to change the subject to a nearer ancestor.
       After which point it would be referred to as "it",
       enabling further changes of subject.
****** example use case
       You might list a topic, within the topic ("it") a caveat,
       and within the caveat's contents refer to the caveat as "that".
***** if in doubt, just use an explicit hyperlink
**** Make comments about the meaning of a pair of braces.
**** Use a (hyperlink to a) relationship in a sentence.
**** Extract the punctuation I tend toward automatically.
     e.g. start with & and two words,
     using (path to) parent if absent
*** share order across contexts
    An "order" (priority to reader) property makes sense common to the same nodes in different contexts.
    Esp. if they are common rel nodes like "instances".
*** [[id:61f58054-3032-4e45-bfda-dbc278c040d7][(All?) the fundamental relations express priority.]]
*** nested links -- links in titles
**** the idea
     This is like creating a single-use relation type.
     Just like relatinoships with permanent types,
     this is useful because it automatically creates links
     to the items referenced in the title,
     rather than requiring the user to do that.
**** a representation: wrap all links in brackets
     :PROPERTIES:
     :ID:       91606c6f-0b09-4cb1-b4fe-81ca72a3f6ce
     :END:
***** example
****** for          titles with links
       [humility] engenders [peace]
****** for links to titles with links
       [[humility] engenders [peace]]
***** problem: It might be confusing that brackets are also used to indicate member types in [[id:cfa775eb-9107-430a-a32c-228901d0f494][relation type definitions]].
**** search over titles that include links
     Order results by title length,
     and if the title includes links,
     show them, rather than showing the whole title as one link.
*** [[id:4df374c9-658c-440b-b520-2298f316c176][recursion schemes can be done in Rust]]
*** cool idea: [[id:2daed6f3-a2e8-4f95-905e-52ecb5e6e4ee][annotation server]]
*** When A has branch B with branch C, A can be using B to explain why it has C. There might reasonably be multiple such paths A to C.
** pressing*
   * = org-roam transplant first needs
*** [#B] easy
**** new empty buffer
**** DONE deletion \ skg
     :PROPERTIES:
     :ID:       fb72f38e-bef6-4de9-a29b-00f0e46afbbb
     :END:
     The user can add a "delete" (when saving) tag to the metadata.
     They will probably want to bury most of the nodes so marked underneath one such node, to avoid clutter.
**** make links
     The choice of what to call the link should be offered when the link is placed, not when its id is selected. That way the menu of aliases can depend on the place.
**** DONE hide content | omits-some-content herald: "{+"
     :PROPERTIES:
     :ID:       324f020b-1145-4279-a87a-02c96dce7a30
     :END:
     This indicates that Rust should treat any org-children that look like content as content,
     but should not delete the node's contains relationship to anything that doesn't appear as an org-child.
     (The easiest implementation of this would be to ignore order. Anything that would become new content on saving can be placed at the end of the content list.)
**** DONE [[id:d0faf3c9-0a96-46e9-b5c3-e5c29db88cb9][repeated nodes in a view \ skg]]
**** AWAITS ? [[id:28d61c54-d474-4828-8ef9-e83b25c12ae8][herald more properties \ skg]]
***** DONE quiet the "ID exists" herald
      omit when possible, which is usually
**** DONE org buffers with multiple roots
     :PROPERTIES:
     :ID:       ba8fbc06-bb9c-4d69-bb1c-34cd1f80fdf4
     :END:
***** immediate fix: track the root, re-request it
***** bigger fix: consider multiple roots
      Rather passing around only a single list of FileNodes,
      pair that with a list of root IDs.
**** override the ordinary save command
*** [[id:bc8fd4c3-0566-400c-96a8-0f4632e7fd1c][merging graph nodes]]
*** [[id:7b2499c4-4c93-44dc-83b1-0a4b9175d6a8][backward views]]
*** [[id:96b1ca65-3afd-4840-8d84-a0642b1a1b4e][diffs in skg]]
*** [[id:4bf53fb8-abb2-4bd2-9b56-d2374fbb931d][skg // sharing & privacy]]
*** transfer org-roam to skg
**** [[id:c0465799-391d-446f-a957-28ff65d72e10][parsing initial super-indented org-children in org-roam data]]
** ? before I can responsibly release it
*** document user obligation : [[id:83f4b23d-1f74-4dbb-9e22-2b121043362a][no two nodes with the same ID]]
*** point out transactional fragility
    Each save is to three "media": the filestore, TypeDB and Tnativy.
    If any one of them fails, things could probably get confusing.
** the social experience
*** the social experience of being hidden
**** mitigation ? anonymize hiders
     For the person hidden to learn from it,
     it might be easier, for ego-defensive reasons,
     if they did not by default see who had hidden them,
     but they did see how many people.
     (They could still find out if they wanted.
     Preventing them from being able to find out would be hard.)
**** problem : could feel scary, humiliating
     Like being voted off the island.
*** gradations of publication
**** A user should be able to share which of another's data they have referred to (inc. subscription) even if they unwilling to share any data beyond that.
*** [[id:91025e2c-2a28-4627-a25b-609de0030752][Sound effects for events would be cool.]]
** not pressing
    Have [[id:9395f417-7e64-461f-ac7e-f7a95ce8d683][patience, these are badass to sacrifice in the short term]].
*** [[id:7dd8d9fd-8e7f-4719-a547-554eb182beb1][rescue smsn into org]]
*** [[id:2cacb9e0-074a-4ae7-a889-b170a355923f]["It, this and these" make tree relationships easy.]]
*** [[id:c84d8ff7-030f-4ff1-9bdd-380f5304b235][make org-mode indentation changes less noisy]]
*** [[id:91025e2c-2a28-4627-a25b-609de0030752][sound effects for skg]]
*** [[id:90546bfd-e191-4664-a88f-029d8ba710de][Auto-parse notes with punctuation grammar.]]
*** [[id:18047d85-01cc-4323-bcc0-27c24524dc98][graph merges, e.g. merges of whole repos of nodes]]
*** share a participatory website requiring no installation
    The user can write in yours even without having installed anything on theirs. They can login with a pseudonym of their choosing, move stuff around, add things, label things. They get their view onto my data, and can show it to others. They can't delete things, and when they rename something its original title becomes an alias, but they can create name clashes to try to bury it.
** even less pressing
*** show binary relationship label with optional intermediating node
    esp. nice if you can filter on those labels,
    or on an ontology they belong to that groups them
*** show when a link is bi-directional
*** list which links are in a node's recursive content
*** [[id:e6e855d9-f2e8-456e-87d7-e82379ead9f1][show co-targeters, co-ancestors]]
*** [#B] technical, not difficult
**** a link could have a personal and public title
     that is, not the target, which obviously can have lots of both,
     but rather the apearance of the link source depends on context --
     whether the user is in public or personal mode
**** randomize order of equivalents
**** strange views
***** merge link-siblings
      From file F, if file G contains a link to F,
      show the siblings of the node with that link.
**** the 'repeated' warning should be in a system font
     I might need Emacs to generate it.
     Currently Rust sends it as body text.
*** Graph development histories might be interesting.
**** And interpolations.
*** Plan tours?
    :PROPERTIES:
    :ID:       437a5820-8a4e-4a96-ab45-c0936b390cd6
    :END:
    { in the knowledge graph,
      of mental states, }
    like musical scales
**** [[id:a67cad81-1bf5-442b-a149-4d819e050f00][Claude suggested, kind of]]
*** Optimize for serendipity?
**** [[id:c46df20a-8bd3-4d69-877e-229f8c487e94][Claude]]'s idea
*** [[id:6ed5be66-787c-479c-8119-cb340a80d72a][ternary rather than binary containment relationship]]
*** later still
**** put your own order on common categories: further definition, instances, ...
**** ? comment files
***** why not
      Subscription lenses seem to make it unnecessary.
***** how
****** when fetching a document, check whether each node has a comment
       and if so, display that as a first subnode,
       called "comments by: [author]"
****** Enable editing, somewhat.
       The title, "comments by: [author]" cannot be changed.
       But the comments themselves can be.
**** graph constraints
***** test each constraint of the schema
      Some violations might not be representable in the .skg format.
***** Can a file include multiple comments_on properties?
      It shouldn't.
***** `contains` should be acyclic
      The TypeDB AI says I can use `distinct` instead,
      but the docs on `distinct` don't suggest that's true.
***** Ttest that all IDs are distinct in the repo.
      maybe in Rust, not TypeDB
***** [[id:2608f577-ab0a-4df7-9eba-b6f3042abbde][Is this how to write cardinality constraints on roles?]]
**** Don't search a repo's .git folder.
**** A public notes repo should be configurable to contain only one commit.
     If so, it is the latest of a corresponding private repo.
**** phone audio interface
     It would speak using a special syntax.
     You would need commands to navigate and shape tree,
     follow links and backlinnks,
     and dictate nodes.
     Would just need an AI to transcribe,
     code to recognize initial and terminal commands,
     code to separate those from the ordinary text between them,
     and code to render as Emacs.
**** Not every headline should be searchable.
     By default they should be,
     but the user should be able to turn that off.
*** what did I mean
**** report where a new root matches earlier words
     and synonyms
** outreach / [[id:b06251ae-3ed5-4805-a5f4-d98557fa7754][explaining skg]]
** outreach / [[id:0ec06d86-92c1-4690-ab27-eaa1520aaf8e][non-obvious implied features]]
** dubious
*** ? try [[id:52e2587c-3485-45cb-9456-d2c9746b2c4d][dependency inversion]]
** abandoned
*** [[id:b91c26e8-54cb-4192-8509-4482c9f60cd6][the TypeDB Python driver]]
** DONE ? unifications
*** private lens onto your public notes ~ subscription
    They would work the same way.
    Could even be a private lens onto a public subscription.
* [[id:b1c2091b-7441-4459-b49e-fac3fe1ed918][skg outreach]]
** explaining skg
   :PROPERTIES:
   :ID:       b06251ae-3ed5-4805-a5f4-d98557fa7754
   :END:
*** explain how to read a tree
    Each node is about the parent.
    Like how chapter titles relate to book titles --
    it's not fixed, everyone's work is different.
    But you can make a simple sentence involving the two.
*** Each note is a collection of notes.
*** Containment and hyperlinks are different.
    A context is a note contained in no other note.
    But a context, like any other note, can be linked to.
*** public privacy and private privacy
    The user can insert a link to a private file anywhere, and the link might be public or not. When not, it is instead part of a corresponding file in their private repository, which refers to the public repository context that it modifies.ost.
** Half Baked Digital offered to share Skg.
   https://mail.google.com/mail/u/0/#inbox/FMfcgzQcpTCFSpKQHwpFKRmtRWfTMzlZ
** evangelism
*** If you feel special and want more you should want skg.
    read as a whole; the last is conclusion
**** Do yuo feel smarter than others?
**** Do you believe you could write
     down a good fraction of the ideas responsible for the difference?
**** Do you believe if others did it could make you far more powerful?
*** Just show mindmapping working. Youtube.
** Share Skg to everyone who uses those tools.
   TypeDB, Rust, Emacs
** fun-looking screenshots of mindmapping
   [[../media-public/mindmapping is fun.png][presence, monogamy, peace]]
*** maybe caveat with [[id:0425cc36-0ce3-4fe9-8cb8-6456db3d0897][comparison to academia]]
** [[id:3f518215-aa9f-4bc0-9fb2-b21dcc25909a][I want help, guidance navigating deep ideas from others.]]
** non-obvious implied features
   :PROPERTIES:
   :ID:       0ec06d86-92c1-4690-ab27-eaa1520aaf8e
   :END:
*** Sharing and version control are independent.
    :PROPERTIES:
    :ID:       8faa302a-2a07-4cc9-8741-86a4e6b69f78
    :END:
    No need to look at diffs to think about sharing.
*** Child content stored separately from child position.
*** Subscriptions can be public and private.
*** Unsubscriptions could I think be public and private.
    The trick: In a public context the privately unsubscribed-from nodes should not show up.
*** Public subscriptions to private nodes reveal almost nothing.
    They reveal the fact of their existence,
    but not what they unsubscribe to -- not even its repo.
* [[id:da0e89a7-0e9d-41da-8c2d-ec4ab2e37c2b][embarrassing]]
* NAH
** [[id:60ac4c5c-fca6-4943-86ee-8f8f9011eaa6][cloning seems unnecessary]]
* ONGOING
** replace the word glyph with herald
* ABANDONED
** Write a Haskell TypeDB driver.
   Would be honorable, but looks hard --
   the Rust driver is enormous.
** [[id:129f20c9-adf5-43dc-933a-3bc21babe152][Have Rust act on the s-exp from Emacs.]]
** [[id:1f87487f-af4a-4a32-84eb-da742b0a3f2e][an org-branch can be read-only and foldable]]
* WORKED GREAT
** [[id:6d031428-eea3-4019-8122-80bd5fa6f9d4][rebuild buffer in Rust with the same structure \ skg]]
** Simplify the Emacs transmission.
   Just send the text with its properties. Let Rust figure out everything else. It will no longer be procedural, subjeect to cursor and other errors.
** [[id:170e4f79-4f5e-49a6-9ce1-8e42c0332100][the meaning of sharing in a knowledge graph]]
** [[id:b72d4277-eced-48b9-85da-b917d9a4aad4][aliases]]
** [[id:25bea258-98e5-4154-b787-98acf64e8ff6][retain focus, folding on save]]
