:PROPERTIES:
:ID:       4bf53fb8-abb2-4bd2-9b56-d2374fbb931d
:END:
#+title: skg // sharing & privacy
* terms
** 'locally invisible' vs. 'locally visible'
   All of one's own nodes are locally visible.
   If one's node S overrides another's node T,
   and T recursively contains T' but S' hides that from view,
   then S' might be locally visible or locally invisible.
   It is locally visible if, in the repos one sees
     (not just the ones one can edit)
     there exists node N, such that
       N recursively contains S', and
       N is not overridden.
* TODO [#A] maybe 'overrides' is unnecessary
  If a user has a node that subscribes to this one,
  they probably want to see that one rather than this one.
* TODO extend clobber_none_fields_with_data_from_disk
  to handle the sharing relations in schema.tql.
* TODO multi repo
** in config, include for each repo
   Path to repo.
   Author-repo shorthand.
   Owned by user (bool).
   Color.
   Privacy level (for filtering, later).
* TODO orgnode metadata: include source repo
  Used for display in Emacs,
  but ignored by Rust when Emacs sends the buffer back,
  instead computed anew.
* TODO probably : index source repo
** seems natural, but not actually necessary
   if we're willing to have to try a few repos
   each time we look for a file
* TODO moving nodes across repos
** a way to move nodes across repos
   Make the node a child of a new kind of treatment=Repo node.
   Saving moves the file and,
   if node repo is indexed, updates the index(es).
** a way to recognize when a .skg file was moved outside of skg
*** search for the node in the repo it is indexed under
*** if not found
    then search all the other repos,
    and update the index
* TODO viewing the data
** all of these should be optional
** heralds
*** indicate if N's container is locally invisible
    Resembles being an orphan | a root.
*** indicate if something overrides or subscribes
    'shr' herald = 'there exists sharing data'
*** indicate if there exists unincorporated content
** trees
*** toggle 'forward-sharing-view'
    such a view shows 2 branches below the node it was made for
**** what it subscribes to
     divide the content of each subscribed-to node into
***** unincorporated content
      These are content of the subscribed-to node
      that have not been incorporated into the user's view.
      They are only visible to the user here
      (or, if multiply contained,
      from other nodes not belonging to the user).
***** hidden content
      divide the hidden content of each subscribed-to node int
****** content visible elsewhere
       The subscribing node does not contain it,
       but some other node of the user's does.
****** buried content
       This content is still visible,
       but only from the subscribed-to node.
*** toggle 'backward-sharing-view'
    Of these, subscriptions seems by far the most interesting,
    but might as well show all three.
**** what subscribes to it
**** what overrides it
**** what it has been hidden from
* view
  things to make visible
** whether something overrides | is overridden
   "ovr" and "ovn"
** what something subscribes to
** whether something has hidden content
* saving (with sharing)
  Save only what is yours to control.
  Have ways to manipulate hiding and overriding.
* operations on nodes
** [[id:9301546a-f6d7-42ce-9034-8e3e0bc5536e][merging two nodes]]
** "ignore" a node
*** what it means
   If node N subscribes to node S,
   any content-descendent of S can be ignored from N,
   not just S's immediate (first generation of) content.
   Or maybe just ignore globally.
*** when it happens
    When the user deletes from or moves from
    foreign content.
** "incorporate" a node
*** what it means
   This causes it to be ignored
   from its initial subscriber,
   but subscribed to somewhere else.
*** when it happens
    When foreign node F contains G,
    and G is moved.
** subscribe to a node
*** when it happens
    Invisibly, when someone modifies a foreign node.
    Explicitly, when someone adds a subscription.
* metadata, flatter buffer
** elaboration
   The title and, under it, metadata (author, ...)
   should be a special first-level node,
   first among its siblings.
** [[id:1f87487f-af4a-4a32-84eb-da742b0a3f2e][an org-branch can be read-only and foldable]]
* allow publishing online
  Make a page for each node.
  For each uncontained node, the page should be saved in text from a recursive traversal, with anchors to anything that needs it. (My org-roam publishing code makes github-style anchors.)
  Generate for each node an initial "nodes linking here" branch, and a second "nodes subscribing here" branch. Private nodes should be excluded from this public view of the public notes. (They could be included in a private view of the public notes.)
* [[id:5eba18fb-8524-4073-b23c-b6fe5aa153f1][interactions between links, subscriptions and comments]]
* show foreign moves of incorporated=merged=subscribed-to nodes
  If they moved something but you merged it with something of your own, maybe don't show the move, because you already placed it and you're already tracking it.
