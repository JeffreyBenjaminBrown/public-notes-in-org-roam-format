:PROPERTIES:
:ID:       4bf53fb8-abb2-4bd2-9b56-d2374fbb931d
:END:
#+title: skg // sharing & privacy
* terms
** 'locally invisible' vs. 'locally visible'
   All of one's own nodes are locally visible.
   If one's node S overrides another's node T,
   and T recursively contains T' but S' hides that from view,
   then S' might be locally visible or locally invisible.
   It is locally visible if, in the repos one sees
     (not just the ones one can edit)
     there exists node N, such that
       N recursively contains S', and
       N is not overridden.
* TODO [#A] 'overrides' seems unnecessary
  If a user has a node that subscribes to this one,
  they probably want to see that one rather than this one.
* TODO extend clobber_none_fields_with_data_from_disk
  to handle the sharing relations in schema.tql.
* TODO multi repo
** in config, include for each repo
   Path to repo.
   Author-repo shorthand.
   Owned by user (bool).
   Color.
   Privacy level (for filtering, later).
* TODO orgnode metadata: include source repo
  Used for display in Emacs,
  but ignored by Rust when Emacs sends the buffer back,
  instead computed anew.
* TODO probably : index source repo
** seems natural, but not actually necessary
   if we're willing to have to try a few repos
   each time we look for a file
* TODO editing
** TODO editing a foreign node
   The user can edit the content of a foreign node F.
   When they save the buffer,
   its title and content are scanned for modifications.
   If there is any mismatch,
   that node in the view is replaced with a new node L (for local).
   L begins with a subscription to F,
   a list of content (which probably mostly duplicates F's),
   and a list of 'hidden' nodes,
   which begin as any content in F not in L.
** TODO editing a subscription
   Suppose local node L subscribes to foreign node F.
   In L, a new kind of edit is now possible,
   involving the content of F.
   Anything deleted from L, if it is content of F,
   gains a "hidden from" relationship to L.
   Anything in the list (set of branches)
     L / subscriptions / subscribed to F / unincorporated content /
   can be incorporated by moving it anywhere else,
   or by simply deleting it from that list.
   In either case it becomes hidden from L.
** TODO moving nodes across repos
*** a way to move nodes across repos
    Make the node a child of a new kind of treatment=Repo node.
    Saving moves the file and,
    if node repo is indexed, updates the index(es).
*** a way to recognize when a .skg file was moved outside of skg
**** search for the node in the repo it is indexed under
**** if not found
     then search all the other repos,
     and update the index
* TODO viewing the data
** all of these should be optional
** heralds
*** TODO ? indicate if N's container is locally invisible
    Resembles being an orphan | a root.
*** indicate if something subscribes or is subscribed to
    'subs' and 'subd'
*** indicate if there exists unincorporated content
** trees : 'sharing branches view'
   such a view shows 3 branches
*** the 3 branches
**** what it subscribes to
     divide the content of each subscribed-to node into
***** unincorporated content
      These are content of the subscribed-to node
      that have not been incorporated into the user's view.
      They are only visible to the user here
      (or, if multiply contained,
      from other nodes not belonging to the user).
***** hidden content
      divide the hidden content of each subscribed-to node int
****** content visible elsewhere
       The subscribing node does not contain it,
       but some other node of the user's does.
****** buried content
       This content is still visible,
       but only from the subscribed-to node.
**** what subscribes to it
     need not show their content
**** what it is hidden from
     Probabluy not very interesting.
     Surely not something the user will often see.
*** their treatment
**** if any of them would be empty, it is not shown
**** if 'what it subscribes to' is modified
     then that is taken as fact.
     But its content and hiddden lists is not changed --
     so anything new it subscribes to is shown entirely as
     'unincoroporated content',
     and it still hides any content of
     anything it no longer subscribes to
     that it was hiding before.
**** noops : 'what subscribes to it' and 'what it is hidden from'
     These can be edited, to no effect.
     The way to change those is to change,
     respectively, the subscriber or the hider.
* TODO beware merges
  mergeing should only be possible if the user owns both
* TODO on save, check that edits are only to owned repos
* later
** allow publishing online
   Make a page for each node.
   For each uncontained node, the page should be saved in text from a recursive traversal, with anchors to anything that needs it. (My org-roam publishing code makes github-style anchors.)
   Generate for each node an initial "nodes linking here" branch, and a second "nodes subscribing here" branch. Private nodes should be excluded from this public view of the public notes. (They could be included in a private view of the public notes.)
* seems unimportant
** [[id:5eba18fb-8524-4073-b23c-b6fe5aa153f1][interactions between links, subscriptions and comments]]
* DONE
** don't worry about foreign moves of already incorporated nodes
   If they moved something but you merged it with something of your own, maybe don't show the move, because you already placed it and you're already tracking it.
