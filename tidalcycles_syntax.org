:PROPERTIES:
:ID:       543397e7-733f-4d56-bf58-35f5e9d83b5e
:END:
#+title: TidalCycles language: syntax, functions, signal flow
* see also
  [[id:8dfe7370-d359-4d4b-99f0-09cd9b0a9822][solutions \ Tidalcycles]]
* DONE reading
  https://tidalcycles.org/docs/patternlib/tutorials/workshop/
* TODO [[id:df2e01d2-1362-48fa-9f09-8d7d70cf31ec][questions about the TidalCycles language]]
* [[id:82eb4202-2da9-43b1-9f89-ab2d3d8fbbd1][effects in TidalCycles]]
* [[id:ae8d6109-5878-4c2e-b2b7-a6aacb980687][transformations (Pattern -> Pattern) in TidalCycles]]
* [[id:ec43fb48-eb6f-4942-bd3e-2aa7a8aa820c][synths in TidalCycles]]
* elementary patterns
** `silence` (the symbol) is a pattern.
** `run n` gives n events, from 0 to n-1
   d1 $ s "[[bd sn]/2, arpy*2%3]*8" |*| speed (run 8 + 1/2)
** "Oscillators"
*** range from 0 to 1 (always?)
*** have a period equal to the unit cycle, I think
*** there are two random ones : rand and irand
* [[id:5904aac5-da03-4eb2-b4b8-45a09dd3499d][voices, long samples and signal flow in Tidal]]
* [[id:c9b50405-11a9-46a2-93f2-d190eaf23389][mini-notation \ TidalCycles]]
* [[id:97077393-00b2-41d1-8fec-7763b936a0f8][non-cyclic time in Tidal]]
* some TidalCycles functions
** listToPat, fromList, fromMaybes and flatpat seem good
** quantise :: (Functor f, RealFrac b) => b -> f b -> f b
   Tell it what to round to multiples of.
** TODO every, spread and generally the "conditions" functions are what I want to generalize.
*** every
**** ::
     Pattern Int
     -> (Pattern a -> Pattern a)
     -> Pattern a
     -> Pattern a
**** is documented under "conditions"
     https://tidalcycles.org/docs/reference/conditions
**** every' lets you change its phase (very important!)
*** spread
**** ::
     (a -> t -> Pattern b)
     -> [a]
     -> t
     -> Pattern b
**** is documented under "alteration"
     https://tidalcycles.org/docs/reference/alteration
*** whenT
**** ::
     (Time -> Bool)
     -> (Pattern a -> Pattern a)
     -> Pattern a
     -> Pattern a
*** TODO within :: Arc -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a
** trunc and linger are cool
   trunc takes a fraction in [0,1] and truncates the second argument that way.
   linger does similarly but repeats the head rather than going silent.
** TODO step' is like a sequencer
   This uses 0 to indicate superpiano, 1 for supermandolin.
   d1 $ s (step' ["superpiano","supermandolin"] "0 1 000 1")
        |* sustain 4 # n 0
** `|x|`, `|x` and `x|`, for all x
   On which side the bar lies determines which pattern divides time.
   If it's on both sides, both patterns divide time.
*** The examples in the documentation are helpful.
    https://tidalcycles.org/docs/patternlib/tutorials/pattern_structure
*** Two interesting operators: |> and <|
    They take values from one side but metric divisions from the other.
** `panic` is like `hush` but stronger.
   Even if samples get stuck, this works,
   because it (very quickly!) resets the synths.
** `fix f` applies `f` when specified conditions are met.
   https://userbase.tidalcycles.org/fix
** `cps` is a parameter, like `s` or `n` except global.
   Try it with oscillators (e.g. `saw` below).
   p "cpsfun" $ s "bd sd(3,8)" # cps (slow 8 $ 0.5 + saw)
** `timeloop` lets you periodically restart a cycle
   https://club.tidalcycles.org/t/restart-a-polymetric-sequence/3736
* some effects I like
  https://tidalcycles.org/docs/reference/audio_effects
** squiz
   Simplistic pitch shift via chopping.
   Try giving it even numbered values.
** the spectral conformer
   "real" and "imag"
   Applies the conformal map
   (the thing that makes Mandelbrot sets, I think).
   Weird vocoder artifacts.
** legato
   Based on my experiments, not code or documentation.
*** Says how long samples should last when interrupted.
    If less than one, the sample ends before interrupted.
    If 2, it lasts twice as long as it took to get interrupted.
    Etc.
** cut
   Assings the voice to a cut group.
   It will end as soon as anything else in the same cut group starts.
* [[id:e89c67a2-6f94-4466-8451-e7b03066aad1][continus parameter variation in Tidalcycles]]
* distortion in Tidal
  Probably [[id:d41a981f-1a73-44bf-85fb-f5a80d72bea3][the bus solution]] will do it.
  But see also
    /home/jeff/code/music/Tidal/distort-a-sum.tidal-SC
