:PROPERTIES:
:ID:       46d56f38-e6a8-43aa-8c74-efccddfb0770
:ROAM_ALIASES: "Vaticle makes TypeDB"
:END:
#+title: TypeDB
* TODO RESUME | unread
** reviewing my notes
*** already reviewed and ordered
    [[id:8b6e8ffc-e7ec-4c17-946b-23a73b51f3bd][TypeDB model and language]]
** reading the Python docs at the [[id:efb4ffb5-219b-4e12-acc6-42ffa6edc775][responses section of the API reference]]
** reading the TypeQL docs at "[[id:9941d24a-fc78-4854-aaef-8493f6ad1da7][Advanced Patterns & Queries]]"
   (I'm already done with the TypeDB docs.)
* TODO [[id:a933cfca-255e-4b95-9e0b-ea19cb723bc2][Contribute a topological sort on partially ordered relations to TypeDB]]
* TODO [[id:d674bf8d-cd41-47aa-8418-36a74cedd561][build Hash for TypeDB]]
* TODO build [[id:5346e42f-5cf6-4af9-8efa-564cd350e104][Hode in TypeDB and Emacs]]
* refs
** getting started
*** TypeDB Core, installing and launching
    https://typedb.com/docs/typedb/2.x/installation.html
*** client, installing a
    https://typedb.com/docs/clients/2.x/clients
** TypeDB
   https://typedb.com/docs/typedb/2.x/overview.html
** TypeQL
   https://typedb.com/docs/typeql/2.x/overview
*** [[id:e86f5069-c318-4935-97ae-538da6d431bf][the full TypeQL grammar]]
** Console
   :PROPERTIES:
   :ID:       c091cef4-e8d0-4880-96a5-6239c7e07604
   :END:
   https://typedb.com/docs/manual/console
** Python client
   :PROPERTIES:
   :ID:       2e5e9f7f-69af-46c0-8998-c1d224d205a7
   :END:
   https://typedb.com/docs/clients/2.x/python/python-overview
   See sidebar for tutorial & API reference.
* PITFALLs
** Docs use "query" to mean more than read ops.
* [[id:f027e52d-db16-4f2b-9b71-d904901a38a2][running TypeDB]]
* [[id:8b6e8ffc-e7ec-4c17-946b-23a73b51f3bd][TypeDB model and language]]
* TODO experiments to run
** DONE Roles are inherited.
   That is, I don't have to define that a type can play a role,
   if I already stated that its parent can.
** DONE If you delete an entity, the relationships it was in persist!
   with holes
** DONE Attributes are not unique per owner!
   This suggests they aren't:
   "A person can have more than one attribute of type full-name. Every instance of attribute will get to the results."
   https://typedb.com/docs/typedb/2.x/development/best
** Try [[id:4470f10a-a037-4c02-98ac-24a0c7299c5c][defining new variables]] in a constraint on an earlier variable.
** Try [[id:5a099383-736c-47a3-927b-11390ff0dd9e][defining (schema) a standalone]] ownership or role membership.
   after having defined the relevant types.
*** then try a standalone data insertion of ownership or role membership
** Is the optional [[id:fd190477-3cd2-4d53-b9fd-b4b31047bdd4][regex]] part of an attribute definition a constraint?
** [[id:fa3b7eb8-c4dc-4748-9c6d-e594305ee35c][Python client experiments]]
** try writing an Emacs client
* TODO questions
** How to enforce attribute uniqueness (various kinds)?
*** global attribute uniqueness
    The attribute might uniquely ID its owner.
*** within-type (and subtypes) attribute uniqueness
*** within-entity attribute uniqueness
*** within-type relationship uniqueness defined by members
    rather than members *and* attributes
** DONE meh
*** [[id:74db29a4-a21e-467c-8aa4-3cb62e393f41][Can a user define their own types?]]
* TODO report errors and maybe-errors in docs
** Unfinished sentence: "The first instance og the"
*** where
    https://typedb.com/docs/typedb/2.x/fundamentals/patterns
*** the quote
    Then the match clause returns all matched combinations, including all permutations: 20 results in total. The first instance og the
    [and then a new section titled "Variables" begins)
** Should the "or" clause in the image at the link end in a semicolon?
   https://typedb.com/docs/typedb/2.x/fundamentals/patterns#_complex_example
** The syntax laid out for undefining rules makes it appear that the "sub" clause is mandatory, but it is not.
   :PROPERTIES:
   :ID:       149fcd59-17f1-4b4d-9f3b-18f8cb66e406
   :END:
   https://typedb.com/docs/typedb/2.x/development/schema
*** For instance, the following undefine query, with no "sub" clause, is valid according to that page.
    undefine

    item owns tag;
** The TypeQL docs are almost entirely redundant to the TypeDB docs.
