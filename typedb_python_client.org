:PROPERTIES:
:ID:       52393e43-d36a-4d8d-9cc4-f2f379e09eff
:END:
#+title: TypeDB Python client
* RESUME reading at
  The section called "Querying" at
  https://typedb.com/docs/clients/2.x/python/python-tutorial
* my code
  [[~/code/graphs/TypeDB/python/README.org]]
* [[id:2e5e9f7f-69af-46c0-8998-c1d224d205a7][documentation]]
* TODO experiments
  :PROPERTIES:
  :ID:       fa3b7eb8-c4dc-4748-9c6d-e594305ee35c
  :END:
** Will an iterator outlive the transaction that made it?
   If not, and I'll need its contents,
   dump it into a list before closing the transaction.
** Try [[id:efb4ffb5-219b-4e12-acc6-42ffa6edc775][navigating responses]].
* functions and syntax
** client-session-transaction "with" formula
*** template
    with TypeDB.core_client("localhost:1729") as client:
      with client.session("mydb", SessionType.DATA) as session:
	with session.transaction(TransactionType.WRITE) as write_transaction:
          ## do something
          write_transaction.commit()

	with session.transaction(TransactionType.READ) as read_transaction:
          ## do something

          ## If not using a `with` statement
          ## must always then close the read transaction, ala:
          ## read_transaction.close()

          pass
*** an example
    from typedb.client import *

    with TypeDB.core_client("localhost:1729") as client:
      with client.session("social_network", SessionType.DATA) as session:
	## Insert a Person using a WRITE transaction
	with session.transaction(TransactionType.WRITE) as write_transaction:
          insert_iterator = write_transaction.query().insert('insert $x isa person, has email "x@email.com";')
          concepts = [ans.get("x") for ans in insert_iterator]
          print("Inserted a person with ID: {0}".format(concepts[0].get_iid()))
          ## to persist changes, write transaction must always be committed (closed)
          write_transaction.commit()

	## Read the person using a READ only transaction
	with session.transaction(TransactionType.READ) as read_transaction:
          answer_iterator = read_transaction.query().match("match $x isa person; get $x; limit 10;")

          for answer in answer_iterator:
            person = answer.get("x")
            print("Retrieved person with id " + person.get_iid())

	## Or query and consume the iterator immediately collecting all the results
	with session.transaction(TransactionType.READ) as read_transaction:
          answer_iterator = read_transaction.query().match("match $x isa person; get $x; limit 10;")
          persons = [ans.get("x") for ans in answer_iterator]
          for person in persons:
            print("Retrieved person with id " + person.get_iid())

	## if not using a `with` statement, then we must always close the session and the read transaction
	# read_transaction.close()
	# session.close()
	# client.close()
** PITFALL: Lots of query functions for different cases
   match
   match_aggregate
   match_group
   match_group_aggregate
   insert
   delete
   update
   explain
   define
   undefine
** PITFALL: Options are common to many functions.
   https://typedb.com/docs/clients/2.x/python/python-api-ref#_options_methods
*** examples
    explain
    infer
    parallel
    prefetch
    *timeout* (various options)
** navigating responses
   :PROPERTIES:
   :ID:       efb4ffb5-219b-4e12-acc6-42ffa6edc775
   :END:
   is a deep rabbit hole
   https://typedb.com/docs/clients/2.x/python/python-api-ref#_response_section
