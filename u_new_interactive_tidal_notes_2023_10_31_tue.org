:PROPERTIES:
:ID:       9898e99f-2a15-4085-97de-302f895572c4
:END:
#+title: u, new interactive Tidal notes <2023-10-31 Tue>
* TODO mute, solo, umute, unsolo
  `mute 1` mutes `d1` (which is a synonym for `p 1`).
  `solo` is similar.
* `silence` (the symbol) is a pattern.
* `run n` gives n events, from 0 to n-1
  d1 $ s "[[bd sn]/2, arpy*2%3]*8" |*| speed (run 8 + 1/2)
* truncating long samples
** cut n = assign to cut group n (which can be shared with other samples)
*** simplest demo
 #+BEGIN_SRC haskell
 d1 $ fast 2 $ sound "bev" # cut 1
 #+end_src
*** interactions
 #+begin_src haskell
   do setcps 1
      d1 $ stack [
	(1/3) <~ (slow 4 $ sound "pebbles ~" |* cut 1),
	slow 2 $ sound "bev ~" # cut 1
	  |*| slow 4 (speed $ run 4 / 2 + 0.5),
	( slow 2 $ every 2 (fast 2 . (<~) (1/4)) $ fast 2 $
	  palindrome $ s "[bd bd*2]/2 sn:1*2" )
	]
 #+end_src
**** TODO Question: How are conflicts resolved?
     If two samples trigger at the same time,
     which should sound?
** legato n = play for n cycles
   Unlike cut groups, this can result in overlap or gaps.
#+begin_src haskell
  d1 $ stack [ speed 2 |*| sound "bev ~ bev ~" # legato 8,
	       speed 0.5 |*| slow 4 (sound "bev ~ bev ~") # cut 1 ]
#+end_src
* my hz for synths function
** defining it
#+begin_src haskell
  let hz :: Pattern p => p Note -> p ValueMap
      hz hzPat = n $ fmap f hzPat where
	f freq = log freq / log 2 * 12
#+end_src
** using it
 #+begin_src haskell
   d1 $ s "supersquare"
     |*| slow 4 (hz "1 2 3 4")
     |+| n "1 2 3 4"
 #+end_src
