:PROPERTIES:
:ID:       d404ba22-f828-4f95-be6c-8b64fe7ed7b7
:END:
#+title: Using Dynamic Programming for Approximate Matching
I understood how to do it but not why it works.
* The algorithm
** Arrange the cache as a |P| by |T| matrix.
 That is, the rows are long like T, the columns short like P.
** Initialize the matrix differently.
 Initialize the first pattern-length column as before, but initialize the first text-length row to all 0s.
** Read minimal edit distances from the last row.
** From the|each minimal edit distance, read a "traceback" to the first row.
*** The offset where the match to P starts in T is
 where the traceback intersections the second row ("row 1" if 0-indexing).
*** Each vertical bit of the traceback corresponds to something missing in T
 or equivalently, something extra in P.
*** Each horiz bit of the traceback corresponds to something missing in P.
 or equivalently, something extra in T.
* It's slow.
Its speed is O(|P|*|T|).
** Fortunately, [[id:e5aa57fd-9ff2-436e-8b5b-ad738e0cfa94][Indexes And Dynamic Programming Work Well Together.]]
* Penalize unusual edits more.
** [[id:49d6af05-cd0b-4011-a28d-c13af9559f8a][In DNA, Some Edits Are More Likely Than Others.]]
** Use a "penalty matrix" to score every possible edit.
There's a row for each of {A,C,T,G,absent}, and similarly columns.
It's 0 down the diagonal.
** Modifying the DP algorithm to for this is easy.
Rather than adding 1 for each edit,
add something pulled from the penalty matrix.
